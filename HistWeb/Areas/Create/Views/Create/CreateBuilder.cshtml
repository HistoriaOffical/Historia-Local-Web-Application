@{
    ViewData["Title"] = "Create Builder";
}

<form id="formStep1" class="" novalidate enctype="multipart/form-data">
    <div class="card" style="margin-bottom:10px" id="step1Card">
        <div class="card-body">
            <div class="row" style="max-width:1500px">
                <div class="col-6">
                    <h2 id="type"></h2>
                </div>
                <div class="col-6 text-right">
                    <h4>Current Cycle Ends: <label id="EndCycleDate"></label></h4>
                    <label><small>Don't know where to start? Read <a asp-area="" asp-controller="Home" asp-action="HowTo" style="text-decoration: underline">here</a>.</small></label>

                </div>
            </div>
            <div class="card">
                <div class="card-body border border-info btn-secondary rounded">
                    <div class="row">
                        <div class="col-3">
                            <b>Next Payment Date in: <label id="daysToSuperBlock">Loading...</label> days</b>
                        </div>
                        <div class="col-3">
                            <b>Voting Deadling in: <label id="votingDeadline">Loading...</label> days</b>
                        </div>
                        <div class="col-3">
                            <b>Currently Passing: <label id="totalPassingCoins">Loading...</label> HTA</b>
                        </div>
                        <div class="col-3">
                            <b>Total Available Budget: <label id="totalCoins">Loading...</label></b>
                        </div>
                    </div>
                </div>
            </div>

            <hr />

            <div class="row" style="max-width:1500px">
                <div class="col-3 createuppertab">
                    <label class="col-form-label" for="tbName">Name: <span style="color:#f00">*</span> <span id="tbNameCnt">0</span>/50</label>
                    <input class="form-control" id="tbName" type="text" placeholder="" required maxlength="40" onchange="validateName(); updateCardTitle();" />
                </div>
                <div class="col-3 createuppertab">
                    <label class="col-form-label" for="tbSummary">Summary: <span style="color:#f00">*</span>  <span id="tbSummaryCnt">0</span>/150 </label>
                    <input class="form-control" id="tbSummary" type="text" placeholder="" required maxlength="150" onchange="validateSummary();  updateCardText();" />
                </div>
                <div class="col-3 createuppertab">
                    <label class="col-form-label" for="tbAddress">Reward Address: <span style="color:#f00">*</span> </label>
                    <input class="form-control" id="tbAddress" type="text" placeholder="" onchange="validatePaymentAddress(); checkPaymentAddress();" required maxlength="255" />
                </div>
                <div class="col-3 createuppertab">
                    <label class="col-form-label" for="tbReward">Reward Amount Requested: <span style="color:#f00">*</span> </label>
                    <input class="form-control" id="tbReward" type="text" placeholder="" onchange="validatePaymentAmount();" required maxlength="10" />
                </div>
            </div>

            <div class="row" id="parentid" style="max-width:1500px; display:none;">
                <div class="col-12 createuppertab">
                    <label class="col-form-label" for="tbParentIPFSCID">In Response to: <span style="" id="tbParentIPFSCID"><u><a href="" style="color: white;"></a></u></span> </label>
                    <input type="hidden" id="tbParentIPFSCIDhidden" value="" />
                </div>
            </div>

            <div class="row" style="max-width:1500px">
                <div id="gjs"></div>
                <div class="card-body">
                    <div id="preview" style="display: none;">
                        <div class="row">
                            <div class="col-12"><h4>Preview:</h4></div>
                        </div>
                        <hr />
                    </div>
                </div>
                <div id="archiveDiv" style="display: none; width:100%; height:100%;"></div>
            </div>

            <div class="row" style="max-width:1500px">
                <div class="card-body">
                    <div class="row" style="max-width:1500px">
                        <div class="col-6">
                            <label>Total Size:&nbsp;<label id="totalSize">0</label>&nbsp;MB</label>
                        </div>
                        <div class="col-6">
                            <a href="https://www.youtube.com/results?search_query=grapesjs+tutorial" target="_blank" id="tutorial" name="tutorial" class="btn float-right btn-secondary float-left">Editor Tutorials</a>
                        </div>
                    </div>
                    <hr />
                    <div class="row" style="max-width:1500px">
                        <div class="col-6">
                            <button name="saveDraft" id="saveDraft" class="btn btn-secondary float-left mr-1">Save Draft</button> &nbsp;
                            <button name="deleteDraft" id="deleteDraft" class="btn btn-secondary float-left">Delete Draft</button>
                            <button name="deleteArchiveDraft" id="deleteArchiveDraft" class="btn btn-secondary float-left">Delete Draft</button>
                        </div>
                        <div class="col-6">
                            <button name="submitRec" id="submitRec" class="btn btn-secondary float-right" disabled style="display: none;">Submit</button>&nbsp;
                            <button name="submitArchive" id="submitArchive" class="btn btn-secondary float-right" disabled style="display: none;">Submit Archive</button>&nbsp;
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>
<div class="row">
    &nbsp;
</div>
<div class="row">
    &nbsp;
</div>
<div class="row">
    &nbsp;
</div>

@section Scripts {

    <script type="text/javascript">

        document.addEventListener('keydown', function (event) {
            if (event.key === 'Enter') {
                event.preventDefault();
            }
        });

        function updateCardText() {
            const tbSummary = document.getElementById('tbSummary');
            const cardText = document.querySelector('.card-text');
            cardText.textContent = tbSummary.value;
        }
        document.getElementById('tbSummary').addEventListener('input', updateCardText);

        function updateCardTitle() {
            const tbName = document.getElementById('tbName');
            const cardTitleElement = document.querySelector('.card-title');
            cardTitleElement.textContent = tbName.value;
        }
        document.getElementById('tbName').addEventListener('input', updateCardTitle);

        var LandingPage = {
            html: null,
            css: null,
            components: null,
            style: null,
        };
        var editor = {};
        let searchParams = new URLSearchParams(window.location.search)
        var id = searchParams.get('Id');
        var type = searchParams.get('Type');
        var template = searchParams.get('Template');
        var archiveURL = searchParams.get('ArchiveURL');
        var cidtype = searchParams.get('cidtype');
        var pid = searchParams.get('pid');

        if (type == 1) {
            $('#type').text("Proposal");
            $('#submitRec').show();
        } else if (type == 4) {
            $('#type').text("Record");
            $('#submitRec').show();
        } else if (type == 5) {
            $('#type').text("Archive");
            $('#tutorial').hide();
            $('#submitRec').hide();
        }

        function validatePaymentAmount() {

            if (/\d/.test($('#tbReward').val())) {

            } else {
                Swal.fire({
                    title: 'Error!',
                    text: 'Reward Amount is not a number.',
                    type: 'error',
                    confirmButtonColor: "#48B5C4",
                    confirmButtonText: 'Ok'
                });
            }

            if ($('#tbReward').val() > $('#totalCoins').text()) {
                Swal.fire({
                    title: 'Error!',
                    text: 'Reward Amount is more than total available budget.',
                    type: 'error',
                    confirmButtonColor: "#48B5C4",
                    confirmButtonText: 'Ok'
                });
            }
            if ($('#tbReward').val() > ($('#totalCoins').text() - $('#totalPassingCoins').text())) {
                Swal.fire({
                    title: 'Error!',
                    text: 'Reward Amount is more that available budget. (Reward Amount Requested > (Total Available Budget - Currently Passing))',
                    type: 'error',
                    confirmButtonColor: "#48B5C4",
                    confirmButtonText: 'Ok'
                });
            }
        }
        convertBytesToMegabytes
        function validateAddress() {
            var dfrdResponse = $.Deferred();
            var data = new FormData(document.getElementById('formStep1'));
            data.append('rewardPaymentAddress', $('#tbAddress').val());
            $.ajax({
                url: '@Url.Action("ValidateAddress", "Create", new { Area = "Create" })',
                type: 'POST',
                contentType: false,
                processData: false,
                data: data
            }).done(function (result) {
               dfrdResponse.resolve(result);
            });
            return dfrdResponse.promise();
        }

        function validatePaymentAddress() {
            validateAddress().then((result) => {
                if (result) {
                }
                else {
                    Swal.fire({
                        title: 'Invalid address',
                        text: 'Payment Address is not valid.',
                        type: 'error',
                        confirmButtonColor: "#545B62",
                        confirmButtonText: 'Ok'
                    });
                }
            });
        }

        function validateName() {

            var allowed_characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0912345678 .,;-_/:?()'\"";
            var isValid = true;
            var inputValue = $("#tbName").val();

            for (var i = 0; i < inputValue.length; i++) {
                if (allowed_characters.indexOf(inputValue[i]) === -1) {
                    Swal.fire({
                        title: 'Invalid character',
                        text: "Allowed characters are: ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0912345678 .,;-_/:?()'\"",
                        type: 'error',
                        confirmButtonColor: "#545B62",
                        confirmButtonText: 'Ok'
                    });
                    isValid = false;
                    break;
                }
            }
            $('#submitArchive').prop('disabled', !isValid);

        }

        function validateSummary() {
            console.log("validateSummary");
            var isValid = true;
            var allowed_characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0912345678 .,;-_/:?()'\"";

            // Get the value directly from the input field
            var inputValue = $("#tbSummary").val();

            // Check if each character in inputValue is allowed
            for (var i = 0; i < inputValue.length; i++) {
                if (allowed_characters.indexOf(inputValue[i]) === -1) {
                    // Character not allowed, handle accordingly (e.g., show an alert)
                    Swal.fire({
                        title: 'Invalid character',
                        text: "Allowed characters are: ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0912345678 .,;-_/:?()'\"",
                        type: 'error',
                        confirmButtonColor: "#545B62",
                        confirmButtonText: 'Ok'
                    });
                    isValid = false;
                    break;
                }
            }
            $('#submitArchive').prop('disabled', !isValid);
        }

        function checkPaymentAddress() {
            var isValid = true;
            var allowed_characters = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";

            // Get the value directly from the input field
            var inputValue = $('#tbAddress').val();

            // Check if each character in inputValue is allowed
            for (var i = 0; i < inputValue.length; i++) {
                if (allowed_characters.indexOf(inputValue[i]) === -1) {
                    Swal.fire({
                        title: 'Invalid character',
                        text: "Allowed characters are: 123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",
                        type: 'error',
                        confirmButtonColor: "#545B62",
                        confirmButtonText: 'Ok'
                    });
                    isValid = false;
                    break;
                }
            }
            $('#submitArchive').prop('disabled', !isValid);
        }

        function UpdateProposalNameCnt() {
            var cs = $(this).val().length;
            $('#tbNameCnt').text(cs);
        }

        function UpdateProposalSummaryCnt() {
            var cs = $(this).val().length;
            $('#tbSummaryCnt').text(cs);
        }

        function UpdateGrapeCnt() {
            var html = editor.getHtml();
            var css = editor.getCss();
            var size = parseFloat((html.length + css.length) / 1000000).toFixed(2);
            $('#totalSize').text(size);
            return size;
        }

        function convertBytesToMegabytes(bytes) {
            const megabytes = bytes / (1024 * 1024);
            return Number(megabytes.toFixed(2));
        }

        function CreateBuilderLoad() {
            $.getJSON('@Url.Action("CreateBuilderLoad", "Create", new { area = "Create" })', { id: id }, function (result) {
                console.log("JSON: " + JSON.stringify(result));
            }).done(function (result) {

                if (result.id == 0) {
                   grapesjs.plugins.add('tweet-plugin', (editor, options) => {
                        // Add the "Tweet" block to the Block Manager
                        editor.BlockManager.add('tweet-block', {
                            label: 'Import Tweet',
                            category: 'Social',
                            content: '<div data-gjs-type="tweet-block"></div>',
                            attributes: { class: 'fab fa-twitter' },
                            onClick: function () {
                                Swal.fire({
                                    title: "Import Post (Tweet).",
                                    text: "Drag this on to the canvas to use.",
                                    showCancelButton: false,
                                    confirmButtonText: 'OK',
                                    confirmButtonColor: "#48B5C4",

                                });
                            },
                        });

                        // Define the component type 'tweet-block'
                        editor.DomComponents.addType('tweet-block', {
                            model: {
                                defaults: {
                                    tagName: 'div',
                                    classes: ['tweet-block'],
                                },
                            },
                        });

                        // Handle the drop event when the tweet block is dropped onto the canvas
                        editor.on('block:drag:stop', (block) => {
                            if (block.get('type') === 'tweet-block') {
                                // Open a SweetAlert dialog for the user to enter the tweet URL
                                Swal.fire({
                                    title: 'Enter the Post (Tweet) URL:',
                                    text: "This is an expertimental feature. It will not import 'Extended' Posts (Tweets) URL. If it doesn't work properly, you can always just do this process manually via taking a screen shot of the Post (Tweet) and importing it as an image .",
                                    input: 'text',
                                    showCancelButton: true,
                                    confirmButtonText: 'Submit',
                                    confirmButtonColor: "#48B5C4",
                                    showLoaderOnConfirm: true,
                                    preConfirm: (tweetUrl) => {
                                        if (tweetUrl) {
                                            // Send the tweet URL to your C# function via AJAX
                                            sendTweetUrlToCsharp(tweetUrl);
                                        }
                                    }
                                });
                            }
                        });

                        function sendTweetUrlToCsharp(tweetUrl) {
                            // Show the "Processing... Please wait" message
                            Swal.fire({
                                title: "Processing...",
                                text: "Attempting to import the Post (Tweet) screenshot",
                                showConfirmButton: false,
                                allowOutsideClick: false,
                                didOpen: () => {
                                    Swal.showLoading();
                                }
                            });

                            // Perform an AJAX request to your C# function
                            $.getJSON('@Url.Action("ImportTweet", "Create", new { area = "Create" })', { tweetUrl: tweetUrl })
                                .done(function(result) {
                                    // Hide the "Processing... Please wait" message
                                    Swal.close();

                                    if (result.success === false) {
                                        // Handle error case
                                        Swal.fire({
                                            icon: "error",
                                            title: "Error",
                                            confirmButtonColor: "#48B5C4",
                                            text: "Failed to import the Post (Tweet). Please try again later."
                                        });
                                    } else {
                                        const tweetContents = JSON.parse(result);
                                        insertTweetContents(tweetContents, tweetUrl);
                                    }
                                })
                                .fail(function(jqXHR, textStatus, errorThrown) {
                                    console.log("error: " + textStatus + ", " + errorThrown + ", " + jqXHR);
                                    Swal.close();
                                    Swal.fire({
                                        icon: "error",
                                        title: "Error",
                                        confirmButtonColor: "#48B5C4",
                                        text: "Failed to import the Post (Tweet). Please try again later."
                                    });
                                });
                        }

                        // Function to insert the tweet contents into the GrapeJS editor
                        function insertTweetContents(tweetImage, tweetUrl) {
                            const imageComponent = editor.DomComponents.addComponent({
                                tagName: 'img',
                                attributes: {
                                    src: `data:image/png;base64, ${tweetImage}`,
                                    style: 'border: 1px solid black;', // Add a border to the image
                                },
                            });

                            const linkComponent = editor.DomComponents.addComponent({
                                tagName: 'a',
                                attributes: {
                                    href: tweetUrl,
                                    target: '_blank',
                                },
                                components: [imageComponent], // Set the image component as a child of the link component
                            });

                            // Append the image component to the canvas
                            editor.getWrapper().appendChild(linkComponent);

                            // Refresh the editor to update the view
                            editor.refresh();
                        }
                    });





                    const editor = grapesjs.init({
                        blocks: true,
                        container: '#gjs',
                        plugins: ['gjs-preset-webpage', 'tweet-plugin'],
                        pluginsOpts: {
                            'gjs-preset-webpage': {
                                // options for the 'gjs-preset-webpage' plugin
                            },
                            'tweet-plugin': {
                                // options for the 'tweet-plugin' plugin
                            },
                        },
                        fromElement: false,
                        storageManager: {
                            autoload: false,
                        },
                    });
                } else {
                    LandingPage = {
                        html: result[0].html,
                        css: result[0].css,
                        components: null,
                        style: null,
                    };

                    editor = grapesjs.init({
                        blocks: true,
                        container: '#gjs',
                        plugins: ['gjs-preset-webpage'],
                        pluginsOpts: {
                            pluginsOpts: {
                                'gjs-preset-webpage': {
                                    // options for the 'gjs-preset-webpage' plugin
                                },
                                'tweet-plugin': {
                                    // options for the 'tweet-plugin' plugin
                                },
                            },
                        },

                        fromElement: false,
                        components: LandingPage.html,
                        style: LandingPage.css,
                        storageManager: {
                            autoload: false
                        },

                    });

                    $('#tbName').val(result[0].name);
                    $('#tbSummary').val(result[0].summary);

                    $('#tbAddress').val(result[0].paymentAddress);
                    $('#tbReward').val(result[0].paymentAmount);
                    //$('#tbIsDraft').val(result[0].IsDraft);
                    $('#tbPaymentDate').val("Today");


                }

            }).fail(function (jqXHR, textStatus, errorThrown) {
				console.log("error: " + textStatus + ", " + errorThrown + ", " + jqXHR);
            });
        }

        function CreateBuilderLoadTemplate(template, id) {
            $.getJSON('@Url.Action("CreateBuilderLoadTemplate", "Create", new { area = "Create" })', { id: 0, template: template }, function (result) {
                console.log("JSON Template: " + JSON.stringify(result));
            }).done(function (result) {

                grapesjs.plugins.add('tweet-plugin', (editor, options) => {
                        editor.BlockManager.add('tweet-block', {
                            label: 'Import Tweet',
                            category: 'Social',
                            content: '<div data-gjs-type="tweet-block"></div>',
                            attributes: { class: 'fab fa-twitter' },
                            onClick: function () {
                                Swal.fire({
                                    title: "Import Post (Tweet).",
                                    text: "Drag this on to the canvas to use.",
                                    showCancelButton: false,
                                    confirmButtonText: 'OK',
                                    confirmButtonColor: "#48B5C4",

                                });
                            },
                        });

                        // Define the component type 'tweet-block'
                        editor.DomComponents.addType('tweet-block', {
                            model: {
                                defaults: {
                                    tagName: 'div',
                                    classes: ['tweet-block'],
                                },
                            },
                        });

                        // Handle the drop event when the tweet block is dropped onto the canvas
                        editor.on('block:drag:stop', (block) => {
                            if (block.get('type') === 'tweet-block') {
                                // Open a SweetAlert dialog for the user to enter the tweet URL
                                Swal.fire({
                                    title: 'Enter the Post (Tweet) URL:',
                                    text: "This is an expertimental feature. It will not import 'Extended' Posts (Tweets) URL. If it doesn't work properly, you can always just do this process manually via taking a screen shot of the Post (Tweet) and importing it as an image .",
                                    input: 'text',
                                    showCancelButton: true,
                                    confirmButtonText: 'Submit',
                                    confirmButtonColor: "#48B5C4",
                                    showLoaderOnConfirm: true,
                                    preConfirm: (tweetUrl) => {
                                        if (tweetUrl) {
                                            // Send the tweet URL to your C# function via AJAX
                                            sendTweetUrlToCsharp(tweetUrl);
                                        }
                                    }
                                });
                            }
                        });

                        function sendTweetUrlToCsharp(tweetUrl) {
                            // Show the "Processing... Please wait" message
                            Swal.fire({
                                title: "Processing...",
                                text: "Attempting to import the Post (Tweet) screenshot",
                                showConfirmButton: false,
                                allowOutsideClick: false,
                                didOpen: () => {
                                    Swal.showLoading();
                                }
                            });

                            // Perform an AJAX request to your C# function
                            $.getJSON('@Url.Action("ImportTweet", "Create", new { area = "Create" })', { tweetUrl: tweetUrl })
                                .done(function(result) {
                                    // Hide the "Processing... Please wait" message
                                    Swal.close();

                                    if (result.success === false) {
                                        // Handle error case
                                        Swal.fire({
                                            icon: "error",
                                            title: "Error",
                                            confirmButtonColor: "#48B5C4",
                                            text: "Failed to import the Post (Tweet). Please try again later."
                                        });
                                    } else {
                                        const tweetContents = JSON.parse(result);
                                        insertTweetContents(tweetContents, tweetUrl);
                                    }
                                })
                                .fail(function(jqXHR, textStatus, errorThrown) {
                                    console.log("error: " + textStatus + ", " + errorThrown + ", " + jqXHR);
                                    Swal.close();
                                    Swal.fire({
                                        icon: "error",
                                        title: "Error",
                                        confirmButtonColor: "#48B5C4",
                                        text: "Failed to import the Post (Tweet). Please try again later."
                                    });
                                });
                        }

                        // Function to insert the tweet contents into the GrapeJS editor
                        function insertTweetContents(tweetImage, tweetUrl) {
                            const imageComponent = editor.DomComponents.addComponent({
                                tagName: 'img',
                                attributes: {
                                    src: `data:image/png;base64, ${tweetImage}`,
                                    style: 'border: 1px solid black;', // Add a border to the image
                                },
                            });

                            const linkComponent = editor.DomComponents.addComponent({
                                tagName: 'a',
                                attributes: {
                                    href: tweetUrl,
                                    target: '_blank',
                                },
                                components: [imageComponent], // Set the image component as a child of the link component
                            });

                            // Append the image component to the canvas
                            editor.getWrapper().appendChild(linkComponent);

                            // Refresh the editor to update the view
                            editor.refresh();
                        }
                    });

                LandingPage = {
                    html: result[0].html,
                    css: result[0].css,
                    components: null,
                    style: null,
                };

                editor = grapesjs.init({
                    blocks: true,
                    container: '#gjs',
                    plugins: ['gjs-preset-webpage', 'tweet-plugin'],
                    pluginsOpts: {
                        'gjs-preset-webpage': {
                            // options
                        },
                        'tweet-plugin': {
                            // options for the 'tweet-plugin' plugin
                        },
                    },
                    fromElement: false,
                    components: LandingPage.html,
                    style: LandingPage.css,
                    storageManager: {
                        autoload: false
                    },
                });
            }).fail(function (jqXHR, textStatus, errorThrown) {
				console.log("error: " + textStatus + ", " + errorThrown + ", " + jqXHR);
            });
        }

        function CreateBuilderLoadArchiveURL() {
            var ext = 1;
            if (ext == 1) {
                $.getJSON('@Url.Action("CreateBuilderLoadArchiveURL", "Create", new { area = "Create" })', { id: id }, function (result) {
                    console.log("JSON Template: " + JSON.stringify(result));
                }).done(function (result) {

                }).fail(function (jqXHR, textStatus, errorThrown) {
                    console.log("error: " + textStatus + ", " + errorThrown + ", " + jqXHR);
                });

                $.ajax({
                    url: '@Url.Action("PollForArchive", "Create", new { Area = "Create" })?id=' + id + '&type=' + type + '&cidtype=' + cidtype + '&pid=' + pid,
                    type: 'GET',
                    contentType: false,
                    processData: false,
                    beforeSend: function () {
                        Swal.fire({
                            showConfirmButton: false,
                            allowOutsideClick: false,
                            allowEscapeKey: false,
                            closeOnClickOutside: false,
                            backdrop: true,
                            title: 'Loading Imported Archive',
                            html:
                                'Please wait while we load your archive.',

                            didOpen: () => {
                                const content = Swal.getHtmlContainer()
                                const $ = content.querySelector.bind(content)
                                Swal.showLoading()
                            }
                        })
                    },
                }).done(function (result) {
                    swal.close();
                    $('#archiveDiv').show();
                    $('#preview').show();
                    $('#tbName').val('What is the title?');
                    $('#tbSummary').val('Describe the document.');
                    $("#archiveDiv").html(result[0].template);

                    const cardAboveIframeElement = document.createElement('div');
                    cardAboveIframeElement.classList.add('card', 'mb-3');

                    const cardBodyAboveIframeElement = document.createElement('div');
                    cardBodyAboveIframeElement.classList.add('card-body');

                    const cardTitleAboveIframeElement = document.createElement('h5');
                    cardTitleAboveIframeElement.classList.add('card-title');
                    cardTitleAboveIframeElement.textContent = 'What is the title?';

                    const cardTextAboveIframeElement = document.createElement('p');
                    cardTextAboveIframeElement.classList.add('card-text');
                    cardTextAboveIframeElement.textContent = 'Describe the document.';


                    cardBodyAboveIframeElement.appendChild(cardTitleAboveIframeElement);
                    cardBodyAboveIframeElement.appendChild(cardTextAboveIframeElement);
                    cardAboveIframeElement.appendChild(cardBodyAboveIframeElement);
                    $('#logo').append(cardAboveIframeElement);
                    $("#oglinkid").val(result[0].oglinkid);

                    var size = convertBytesToMegabytes(result[0].totalSize);

                    if (size > 10) {
                        Swal.fire({
                            title: 'Error!',
                            text: 'The webpage or file you have created exceeds the maximum size limit of 10MB.',
                            type: 'error',
                            confirmButtonColor: "#545B62",
                            confirmButtonText: 'Ok'
                        });
                    }
                    $("#totalSize").html(size);
                    let searchParams = new URLSearchParams(window.location.search)
                    var ipfsurl = result[0].summaryname;
                    var cidtype = paramArr[3];
                    var pid = paramArr[4];
                    if (pid !== null && pid !== undefined && pid !== "") {
                        $('#parentid').show();
                        $('#tbParentIPFSCID').html("<u><a href=/Proposals/Proposals/ProposalDetails?hash=" + pid + " style='color: white;'>" + ipfsurl + "</a></u>");
                        $('#tbParentIPFSCIDhidden').val(ipfsurl);
                    }
                    if (cidtype == 0) {
                        $('#type').text("Archive - Suggest an Edit");
                    } else if (cidtype == 1) {
                        $('#type').text("Archive - Add Additional Evidence");
                    } else if (cidtype == 2) {
                        $('#type').text("Archive - Add To Topic");
                    } else if (cidtype == 3) {
                        $('#type').text("Archive - Add Translation");
                    }

                }).always(function (result) {

                });
            } else {
                Swal.fire({
                    showConfirmButton: false,
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    closeOnClickOutside: false,
                    backdrop: true,
                    title: 'Historia Browser Extension Not Installed',
                    html:
                        '<div align="left">' +
                        'To use the Archive feature, you must have the Historia Browser Extension installed.</div>' +
                        '<br><div align="center"><a href="/Home/Wallets?area=Home" class="btn btn-secondary btn-lg active" role="button">Wallets & Software</a>.' +
                        '</div><br>',

                    didOpen: () => {
                        const content = Swal.getHtmlContainer()
                        const $ = content.querySelector.bind(content)
                    }
                })
            }

        }

        function submit(data) {

            // Show loading message
            console.log("SUBMIT::START");

            // Submit the request to the server
            console.log("SUBMIT::BEFORE", data);
            $.ajax({
                url: '@Url.Action("Submit", "Create", new { Area = "Create" })',
                type: 'POST',
                contentType: false,
                processData: false,
                data: data,
                complete: function (data) {
                    console.log("SUBMIT::COMPL::", data);
                }
            }).done(function (result) {
                console.log("SUBMIT::DONE::", data);
                Swal.fire({
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    closeOnClickOutside: false,
                    confirmButtonColor: "#48B5C4",
                    backdrop: true,
                    title: 'Success!',
                    html:
                        'Your document has been submitted.<br><br> It should show up on the blockchain within one (1) hour.',
                    type: 'success',
                    confirmButtonText: 'Ok'
                }).then(function () {
                    console.log("Redirect");
                    //window.location.href = "https://historia.network/";
                });
            }).fail(function (error) {
                // Handle failure
                Swal.close();
                console.error('SUBMIT::Ajax request failed:', error);
            });
            console.log("SUBMIT::END");
        }

        $(document).ready(function () {
            console.log("BUILD");
            if (template === "proposal" || template === "news" || template === "wiki") {
                CreateBuilderLoadTemplate(template);
                $('#submitRec').show();
                $('#submitRec').prop('disabled', false);
                $('#submitArchive').hide();
                $('#submitArchive').prop('disabled', true);
                $('#deleteArchiveDraft').hide();
            } else if (type == 4.1) {
                CreateBuilderLoadMedia();
                $('#submitRec').hide();
                $('#saveDraft').hide();
                $('#deleteDraft').hide();
                $('#deleteArchiveDraft').show();
                $('#submitArchive').show();
                $('#submitArchive').prop('disabled', false);
            } else if (type == 5) {
                CreateBuilderLoadArchiveURL();
                $('#saveDraft').hide();
                $('#deleteDraft').hide();
                $('#submitRec').hide();
                $('#submitArchive').show();
                $('#submitArchive').prop('disabled', false);
                $('#deleteArchiveDraft').show();
            } else {
                CreateBuilderLoad();
                $('#submitRec').show();
                $('#submitRec').prop('disabled', false);
                $('#submitArchive').hide();
                $('#submitArchive').prop('disabled', true);
                $('#deleteArchiveDraft').hide();
            }

            $('#tbName').keyup(UpdateProposalNameCnt);
            $('#tbName').keydown(UpdateProposalNameCnt);
            $('#tbSummary').keyup(UpdateProposalSummaryCnt);
            $('#tbSummary').keydown(UpdateProposalSummaryCnt);

        });

        $('#saveDraft').off().on('click', function (evt) {

            var form = $('#formStep1');
            var html = editor.getHtml();
            var css = editor.getCss(); //get css content of document
            var data = new FormData(document.getElementById('formStep1'));
            let searchParams = new URLSearchParams(window.location.search)
            var id = searchParams.get('Id');
            var type = searchParams.get('Type');
            var template = searchParams.get('Template');

            if ($('#tbName').val().length === 0) {
                Swal.fire({
                    title: 'Error!',
                    text: 'Unable to save draft. Please add a "Name"',
                    type: 'error',
                    confirmButtonColor: "#545B62",
                    confirmButtonText: 'Ok'
                });
                return false;
            }

            data.append('id', id);
            data.append('Type', type);
            data.append('Name', $('#tbName').val());
            data.append('Summary', $('#tbSummary').val());
            data.append('html', html);
            data.append('css', css);
            data.append('PaymentAddress', $('#tbAddress').val());
            data.append('PaymentAmount', $('#tbReward').val());
            data.append('IsDraft', 1);
            //data.append('ParentIPFSCID', $('#tbParentIPFSCID').val());
            data.append('paymentDate', $('#tbPaymentDate').val());
            data.append('formData', form.serialize());

            console.log("Data: " + data);
            $.ajax({
                url: '@Url.Action("SaveCreateDraft", "Create", new { Area = "Create" })',
                type: 'POST',
                contentType: false,
                processData: false,
                data: data,
            }).done(function (result) {
                console.log('result: ' + JSON.stringify(result));
                if (result.success) {
                    Swal.fire({
                        title: 'Success!',
                        text: 'You draft has been saved.',
                        type: 'success',
                        confirmButtonColor: "#545B62",
                        confirmButtonText: 'Ok'
                    });
                }
                else {
                    Swal.fire({
                        title: 'Error!',
                        text: 'Unable to save draft. Please try again later',
                        type: 'error',
                        confirmButtonColor: "#545B62",
                        confirmButtonText: 'Ok'
                    });
                }
            });

            return false;

        });

        $('#deleteDraft').off().on('click', function (evt) {

            let searchParams = new URLSearchParams(window.location.search)
            var id = searchParams.get('Id');
            var form = $('#formStep1');
            var data = new FormData(document.getElementById('formStep1'));
            data.append('id', id);
            data.append('formData', form.serialize());

            Swal.fire({
                title: "Are you sure you want to delete this draft?",
                text: "You can not recover this!",
                type: "warning",
                showCancelButton: true,
                confirmButtonClass: "btn-danger",
                confirmButtonText: "Yes, delete this draft!",
                cancelButtonText: "No, don't delete it!",
                closeOnConfirm: true,
                closeOnCancel: true
            }).then((confirm) => {
                if (confirm.dismiss !== 'cancel') {
                   $.ajax({
                        url: '@Url.Action("DeleteCreateDraft", "Create", new { Area = "Create" })',
                        type: 'POST',
                        contentType: false,
                        processData: false,
                        data: data,
                    }).done(function (result) {
                        console.log('result: ' + JSON.stringify(result));
                        if (result.success) {
                            Swal.fire({
                                title: 'Success!',
                                text: 'You draft has been deleted.',
                                type: 'success',
                                confirmButtonColor: "#545B62",
                                confirmButtonText: 'Ok'
                            });
                        }
                        else {
                            Swal.fire({
                                title: 'Error!',
                                text: 'Unable to delete draft. Please try again later',
                                type: 'error',
                                confirmButtonColor: "#545B62",
                                confirmButtonText: 'Ok'
                            });
                        }
                    });
                }
            });

            return false;

        });

        $('#deleteArchiveDraft').off().on('click', function (evt) {

        var paramArr = new Array();
        paramArr = getsearchParams();
        var id = paramArr[0]; // ID

        var form = $('#formStep1');
        var data = new FormData(document.getElementById('formStep1'));
        data.append('id', id);
        data.append('formData', form.serialize());

        Swal.fire({
            title: "Are you sure you want to delete this draft?",
            text: "You can not recover this!",
            type: "warning",
            showCancelButton: true,
            confirmButtonClass: "btn-danger",
            confirmButtonText: "Yes, delete this draft!",
            cancelButtonText: "No, don't delete it!",
            closeOnConfirm: true,
            closeOnCancel: true
        }).then((confirm) => {
            if (confirm.dismiss !== 'cancel') {
                $.ajax({
                    url: '@Url.Action("DeleteArchiveDraft", "Create", new { Area = "Create" })',
                    type: 'POST',
                    contentType: false,
                    processData: false,
                    data: data,
                }).done(function (result) {

                    if (result.success) {
                        Swal.fire({
                            title: 'Success!',
                            text: 'You draft has been deleted.',
                            type: 'success',
                            confirmButtonColor: "#48B5C4",
                            confirmButtonText: 'Ok'
                        });
                    }
                    else {
                        Swal.fire({
                            title: 'Error!',
                            text: 'Unable to delete draft. Please try again later',
                            type: 'error',
                            confirmButtonColor: "#48B5C4",
                            confirmButtonText: 'Ok'
                        });
                    }
                });
                window.location.href = "https://historia.network/";
            }
        });

        return false;

    });

        $('#submitRec').off().on('click', function (evt) {
            evt.stopPropagation();
            evt.preventDefault();
            size = UpdateGrapeCnt();

            if (size > 10) {
                Swal.fire({
                    title: 'Error!',
                    text: 'The web page or file you have created exceeds the maximum size limit of 10MB.',
                    type: 'error',
                    confirmButtonColor: "#545B62",
                    confirmButtonText: 'Ok'
                });
                return false;
            }

            evt.preventDefault();
            evt.stopPropagation();
            var passphrase;
            Swal.fire({
                title: "Are you sure you want to continue?",
                html:
                    '<h5>You can not edit this document after submission!</h5><b>Before submitting we recommend checking the following:</b><br><br><ul><li  style="text-align: left;">Grammar is important - Check the grammar.</li><li style="text-align: left;">Check formatting - Is capitalization correct? Does the submission look professionally written?</li><li  style="text-align: left;">Check content - Are images properly formatted and sized? Are there captions below images?</li><li style="text-align: left;">Name - Did you add an apprioprate name?</li><li style="text-align: left;">Summary - Does your summary do a good job summarizing the article?</li><li style="text-align: left;">Reward Address - Is it correct?</li><li style="text-align: left;">Reward Amount - We recommend at least asking for more than the cost of submission.</li></ul><h5>You must enter your Historia Core wallet passphrase. If your wallet is not encrypted just hit submit.</h5><input type="text" id="passphrase" class="swal2-input" placeholder="Passphrase">`',

                type: "warning",
                allowOutsideClick: false,
                allowEscapeKey: false,
                closeOnClickOutside: false,
                backdrop: true,
                showCancelButton: true,
                confirmButtonClass: "btn-danger",
                confirmButtonText: "Yes, submit this document!",
                cancelButtonText: "No, cancel it!",
                closeOnConfirm: true,
                closeOnCancel: true,
                preConfirm: () => {
                    passphrase = Swal.getPopup().querySelector('#passphrase').value
                }

            }).then(function (confirm) {
                if (!confirm.value) {
                    Swal.fire({
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        closeOnClickOutside: false,
                        backdrop: true,
                        confirmButtonColor: "#545B62",
                        title: 'Cancelled!',
                        text: 'Your document has not been submitted.',
                        type: 'error',
                        confirmButtonText: 'Ok'
                    });
                    return false;
                }

                var form = $('#formStep1');
                var html = editor.getHtml();
                var css = editor.getCss(); //get css content of document
                var data = new FormData(document.getElementById('formStep1'));
                let searchParams = new URLSearchParams(window.location.search)
                var id = searchParams.get('Id');
                var type = searchParams.get('Type');
                var template = searchParams.get('Template');

                if ($('#tbName').val().length === 0) {
                    Swal.fire({
                        title: 'Error!',
                        text: 'Unable to Process. Please add a "Name"',
                        type: 'error',
                        confirmButtonColor: "#545B62",
                        confirmButtonText: 'Ok'
                    });
                    return false;
                }

                if ($('#tbSummary').val().length === 0) {
                    Swal.fire({
                        title: 'Error!',
                        text: 'Unable to Process. Please add a "Summary"',
                        type: 'error',
                        confirmButtonColor: "#545B62",
                        confirmButtonText: 'Ok'
                    });
                    return false;
                }

                if ($('#tbAddress').val().length === 0) {
                    Swal.fire({
                        title: 'Error!',
                        text: 'Unable to Process. Please add a "Reward Address"',
                        type: 'error',
                        confirmButtonColor: "#545B62",
                        confirmButtonText: 'Ok'
                    });
                    return false;
                }

                if ($('#tbReward').val().length === 0) {
                    Swal.fire({
                        title: 'Error!',
                        text: 'Unable to Process. Please add a "Reward Amount"',
                        type: 'error',
                        confirmButtonColor: "#545B62",
                        confirmButtonText: 'Ok'
                    });
                    return false;
                }

                data.append('id', id);
                data.append('Type', type);
                data.append('Name', $('#tbName').val());
                data.append('Summary', $('#tbSummary').val());
                data.append('html', html);
                data.append('css', css);
                data.append('PaymentAddress', $('#tbAddress').val());
                data.append('PaymentAmount', $('#tbReward').val());
                data.append('IsDraft', 1);
                data.append('PaymentDate', $('#EndCycleDate').html());
                data.append('passphrase', passphrase);
                data.append('formData', form.serialize());

                $.ajax({
                    url: '@Url.Action("Submit", "Create", new { Area = "Create" })',
                    type: 'POST',
                    contentType: false,
                    processData: false,
                    data: data,
                    beforeSend: function () {
                        Swal.fire({
                            showConfirmButton: false,
                            allowOutsideClick: false,
                            allowEscapeKey: false,
                            closeOnClickOutside: false,
                            backdrop: true,
                            title: 'Processing Your Document.',
                            html:
                                'Attempting to submit your document to the blockchain.' +
                                '<br><br><b>Estimated Time:10-30 minutes</b><br>' +
                                '<br>Do not leave this page until you receive success or failure message!',

                            didOpen: () => {
                                const content = Swal.getHtmlContainer()
                                const $ = content.querySelector.bind(content)
                                Swal.showLoading()
                            }
                        })
                    },
                    complete: function (data) {
                    }

                }).done(function (result) {
                    swal.close();
                    if (result.success) {
                        Swal.fire({
                            allowOutsideClick: false,
                            allowEscapeKey: false,
                            closeOnClickOutside: false,
                            confirmButtonColor: "#545B62",
                            backdrop: true,
                            title: 'Success!',
                            html:
                                'Your document has been submitted.<br><br><b>Marketing</b><br>For the best chance to get your document passed by the voters, you should market and lobby for it!<br><br>Share on social media:<br><br><div class="container"><div class="row"><div class="col-sm"><a href="http://twitter.com/share?text=' + summaryName + ' - ' + summary + '&url=https://historia.network/id/' + proposalHash + ' &hashtags=#historia,#blockchain,' + escapedString + '"><i class="fa-brands fa-twitter"></i> X.com</a></div><div class="col-sm"><a href="https://www.facebook.com/sharer/sharer.php?u=https://historia.network/id/' + proposalHash + '" target="_blank"><i class="fa-brands fa-facebook-f"></i> Facebook</a></div></div><div class="row"><div class="col-sm"><a href="https://discordapp.com/invite/b3FJPpn" target="_blank"><i class="fa-brands fa-discord"></i> Discord</a></div><div class="col-sm">  <a href="https://t.me/share/url?url=https://historia.network/id/' + proposalHash + '" target="_blank"><i class="fa-brands fa-telegram"></i> Telegram</a></div></div><div class="row">         <div class="col-sm"><a href="https://www.reddit.com/submit?url=https://historia.network/id/' + proposalHash + '" target="_blank"><i class="fa-brands fa-reddit"></i> Reddit</a></div><div class="col-sm"><a href="mailto:?subject=Check%20out%20this%20link&body=Heres%20the%20link%3A%2https://historia.network/id/' + proposalHash + '"><i class="fa fa-envelope" aria-hidden="true"></i> Via Email</a></div></div>',
                            type: 'success',
                            confirmButtonText: 'Ok'
                        }).then(function () {
                            window.location.href = "/";
                        });

                    } else {
                        Swal.fire({
                            allowOutsideClick: false,
                            allowEscapeKey: false,
                            closeOnClickOutside: false,
                            backdrop: true,
                            confirmButtonColor: "#545B62",
                            title: 'Error!',
                            text: result.error,
                            type: 'error',
                            confirmButtonText: 'Ok'
                        });
                    }
                }).always(function (result) {

                });

                return false;
            });
            return false;
        });

        $('#submitArchive').off().on('click', function (evt) {

            size = parseFloat($('#archiveDiv').html().length / 1000000).toFixed(2);
            console.log("SIZE: " + size);
            if (size > 10) {
                Swal.fire({
                    title: 'Error!',
                    text: 'The web page or file you have created exceeds the maximum size limit of 10MB.',
                    type: 'error',
                    confirmButtonColor: "#545B62",
                    confirmButtonText: 'Ok'
                });
                return false;
            }

            evt.preventDefault();
            evt.stopPropagation();
            var passphrase;
            Swal.fire({
                title: "Are you sure you want to continue?",
                html:
                    '<h5>You can not edit this document after submission!</h5><b>Before submitting we recommend checking the following:</b><br><br><ul><li  style="text-align: left;">Grammar is important - Check the grammar.</li><li style="text-align: left;">Check formatting - Is capitalization correct? Does the submission look professionally written?</li><li  style="text-align: left;">Check content - Are images properly formatted and sized? Are there captions below images?</li><li style="text-align: left;">Name - Did you add an apprioprate name?</li><li style="text-align: left;">Summary - Does your summary do a good job summarizing the article?</li><li style="text-align: left;">Reward Address - Is it correct?</li><li style="text-align: left;">Reward Amount - We recommend at least asking for more than the cost of submission.</li></ul><h5>You must enter your Historia Core wallet passphrase. If you wallet is not encrypted just hit submit.</h5><input type="text" id="passphrase" class="swal2-input" placeholder="Passphrase">',
                type: "warning",
                allowOutsideClick: false,
                allowEscapeKey: false,
                closeOnClickOutside: false,
                backdrop: true,
                showCancelButton: true,
                confirmButtonClass: "btn-danger",
                confirmButtonText: "Yes, submit this document!",
                cancelButtonText: "No, cancel it!",
                closeOnConfirm: true,
                closeOnCancel: true,
                preConfirm: () => {
                    passphrase = Swal.getPopup().querySelector('#passphrase').value
                }

            }).then(function (confirm) {
                if (!confirm.value) {
                    Swal.fire({
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        closeOnClickOutside: false,
                        backdrop: true,
                        confirmButtonColor: "#545B62",
                        title: 'Cancelled!',
                        text: 'Your document has not been submitted.',
                        type: 'error',
                        confirmButtonText: 'Ok'
                    });
                    return false;
                }

                var form = $('#formStep1');
                var data = new FormData(document.getElementById('formStep1'));
                let searchParams = new URLSearchParams(window.location.search)
                var id = searchParams.get('Id');
                var type = searchParams.get('Type');
                var template = searchParams.get('Template');

                if ($('#tbName').val().length === 0) {
                    Swal.fire({
                        title: 'Error!',
                        text: 'Unable to Process. Please add a "Name"',
                        type: 'error',
                        confirmButtonColor: "#545B62",
                        confirmButtonText: 'Ok'
                    });
                    return false;
                }

                if ($('#tbSummary').val().length === 0) {
                    Swal.fire({
                        title: 'Error!',
                        text: 'Unable to Process. Please add a "Summary"',
                        type: 'error',
                        confirmButtonColor: "#545B62",
                        confirmButtonText: 'Ok'
                    });
                    return false;
                }

                if ($('#tbAddress').val().length === 0) {
                    Swal.fire({
                        title: 'Error!',
                        text: 'Unable to Process. Please add a "Reward Address"',
                        type: 'error',
                        confirmButtonColor: "#545B62",
                        confirmButtonText: 'Ok'
                    });
                    return false;
                }

                if ($('#tbReward').val().length === 0) {
                    Swal.fire({
                        title: 'Error!',
                        text: 'Unable to Process. Please add a "Reward Amount"',
                        type: 'error',
                        confirmButtonColor: "#545B62",
                        confirmButtonText: 'Ok'
                    });
                    return false;
                }

                data.append('id', id);
                data.append('Type', type);
                data.append('Name', $('#tbName').val());
                data.append('Summary', $('#tbSummary').val());
                data.append('html', $('#archiveDiv').html());
                console.log("HTML: " + $('#archiveDiv').html());
                data.append('isArchive', 1);
                data.append('PaymentAddress', $('#tbAddress').val());
                data.append('PaymentAmount', $('#tbReward').val());
                data.append('IsDraft', 1);
                data.append('PaymentDate', $('#EndCycleDate').html());
                data.append('passphrase', passphrase);
                data.append('formData', form.serialize());

                $.ajax({
                    url: '@Url.Action("Submit", "Create", new { Area = "Create" })',
                    type: 'POST',
                    contentType: false,
                    processData: false,
                    data: data,
                    beforeSend: function () {
                        Swal.fire({
                            showConfirmButton: false,
                            allowOutsideClick: false,
                            allowEscapeKey: false,
                            closeOnClickOutside: false,
                            backdrop: true,
                            title: 'Processing Your Document.',
                            html:
                                'Attempting to submit your document to the blockchain.' +
                                '<br><br><b>Estimated Time:10-30 minutes</b><br>' +
                                '<br>Do not leave this page until you receive success or failure message!',

                            didOpen: () => {
                                const content = Swal.getHtmlContainer()
                                const $ = content.querySelector.bind(content)
                                Swal.showLoading()
                            }
                        })
                    },
                    complete: function (data) {
                    }

                }).done(function (result) {
                    swal.close();
                    if (result.success) {
                        var success = result.Success;
                        var summaryName = result.SummaryName;
                        var summary = result.Summary;
                        var proposalHash = result.ProposalHash;
                        var escapedString = '@("@historiasys")';
                        $('#submitArchive').hide();
                        $('#submitArchive').prop('disabled', true);
                        Swal.fire({
                            allowOutsideClick: false,
                            allowEscapeKey: false,
                            closeOnClickOutside: false,
                            confirmButtonColor: "#545B62",
                            backdrop: true,
                            title: 'Success!',
                            html:
                                'Your document has been submitted.<br><br><b>Marketing</b><br>For the best chance to get your document passed by the voters, you should market and lobby for it!<br><br>Share on social media:<br><br><div class="container"><div class="row"><div class="col-sm"><a href="http://twitter.com/share?text=' + summaryName + ' - ' + summary + '&url=https://historia.network/id/' + proposalHash + ' &hashtags=#historia,#blockchain,' + escapedString + '"><i class="fa-brands fa-twitter"></i> X.com</a></div><div class="col-sm"><a href="https://www.facebook.com/sharer/sharer.php?u=https://historia.network/id/' + proposalHash + '" target="_blank"><i class="fa-brands fa-facebook-f"></i> Facebook</a></div></div><div class="row"><div class="col-sm"><a href="https://discordapp.com/invite/b3FJPpn" target="_blank"><i class="fa-brands fa-discord"></i> Discord</a></div><div class="col-sm">  <a href="https://t.me/share/url?url=https://historia.network/id/' + proposalHash + '" target="_blank"><i class="fa-brands fa-telegram"></i> Telegram</a></div></div><div class="row">         <div class="col-sm"><a href="https://www.reddit.com/submit?url=https://historia.network/id/' + proposalHash + '" target="_blank"><i class="fa-brands fa-reddit"></i> Reddit</a></div><div class="col-sm"><a href="mailto:?subject=Check%20out%20this%20link&body=Heres%20the%20link%3A%2https://historia.network/id/' + proposalHash + '"><i class="fa fa-envelope" aria-hidden="true"></i> Via Email</a></div></div>',
                            type: 'success',
                            confirmButtonText: 'Ok'
                        }).then(function () {
                            window.location.href = "/";
                        });

                    }
                    else {
                        Swal.fire({
                            allowOutsideClick: false,
                            allowEscapeKey: false,
                            closeOnClickOutside: false,
                            backdrop: true,
                            confirmButtonColor: "#545B62",
                            title: 'Error!',
                            text: result.error,
                            type: 'error',
                            confirmButtonText: 'Ok'
                        });
                    }
                }).always(function (result) {

                });

                return false;
            });
            return false;
        });
    </script>
}
