@model HistWeb.Areas.Proposals.Models.ProposalViewModel
@using HistWeb.Helpers

@{
    ViewData["Title"] = Model.CurrentModel.ProposalName + " - " + Model.CurrentModel.ProposalSummary;
}

@section Styles
{
    <style>

        /* selected btn css */
        .btn-group-toggle .btn:not(:disabled):not(.disabled).active, .btn-group-toggle .btn:not(:disabled):not(.disabled):active, .show > .btn.dropdown-toggle {
            color: #fff;
            background-color: #2196F3;
            border-color: #2196F3;
        }

        .dt-body-left {
            text-align: left;
        }


        /* non selected btn css */
        .btn-group-toggle .btn {
            color: #fff;
            background-color: #b7b7b7;
            border-color: #6c757d;
        }

        .popover {
            max-width: 760px !important;
        }

        .card-vertical {
            display: none;
        }

            .card-vertical > img {
                width: 100%;
            }

        .card-horizontal {
            display: flex;
            flex: 1 1 auto;
        }

        #versionsTable {
            table-layout: fixed;
        }

        @@media screen and (max-width: 700px) {
            .card-vertical {
                display: block;
            }

            .card-horizontal {
                display: none;
            }
        }

        @@supports (-moz-appearance:none) {
            iframe {
                border: 2px solid rgb(218, 218, 218);
                height: auto !important;
            }
        }
        .breadcrumb-back-link {
            display: inline-block;
            margin-bottom: 5px;
            color: #007bff;
            text-decoration: none;
            color:darkgray;
        }

        .breadcrumb-back-link:hover {
            text-decoration: underline;
        }
     </style>
}


<div class="text-left" style="margin-top:0px">
    <a href="#" class="breadcrumb-back-link" onclick="window.history.back();">← Go Back</a>
    <div class="listing-container" style="margin-top: 0px;">
        <div class="row">
            <div class="col-md-10">
                <div class="w-clearfix" style="margin-top: 5px;">
                    <h5 class="card-title" style="display: inline;">
                        <a href="/Proposals/Proposals/ProposalDetails?hash=@Model.CurrentModel.Hash" class="">@Model.CurrentModel.ProposalName</a>
                    </h5>

                    <label id="time_@Model.CurrentModel.Id" style="line-height: normal;"></label>&nbsp;
                    <label id="recordTime" style="line-height: normal;" class="ml-0 float-right"></label>&nbsp;<br />
                </div>
            </div>
            <div class="col-md-2">
                <div class="title text-left">

                    @if (Model.CurrentModel.Type == "1")
                    {
                        <span class="ml-0" style="vertical-align:middle;"><button type="button" class="btn btn-outline-dark float-right btn-sm" id="btnPro">Proposal</button></span>
                    }
                    else if (Model.CurrentModel.Type == "4")
                    { 
                        @if (@Model.CurrentModel.ParentIPFSCID == "")
                        {
                            <span class="ml-0" style="vertical-align:middle;"><button type="button" class="btn btn-outline-dark float-right btn-sm" id="btnRec">Record</button></span>
                        }
                        else
                        {
                            @if (Model.CurrentModel.PastSuperBlock == 0)
                            {
                                if (@Model.CurrentModel.cidtype == "1")
                                {
                                    <span class="ml-0" style="vertical-align:middle;"><button type="button" id="btnSEU" class="btn btn-outline-dark float-right btn-sm">Suggested Evidence Update</button></span>
                                }
                                else if (@Model.CurrentModel.cidtype == "2")
                                {
                                    <span class="ml-0" style="vertical-align:middle;"><button type="button" id="btnSTU" class="btn btn-outline-dark float-right btn-sm">Suggested Topic Update</button></span>
                                }
                                else
                                {
                                    <span class="ml-0" style="vertical-align:middle;"><button type="button" id="btnSRU" class="btn btn-outline-dark float-right btn-sm">Suggested Record Update</button></span>
                                }
                            }
                            else
                            {
                                if (@Model.CurrentModel.cidtype == "1")
                                {
                                    <span class="ml-0" style="vertical-align:middle;"><button type="button" id="btnSEU" class="btn btn-outline-dark float-right btn-sm">Evidence Update</button></span>
                                }
                                else if (@Model.CurrentModel.cidtype == "2")
                                {
                                    <span class="ml-0" style="vertical-align:middle;"><button type="button" id="btnSTU" class="btn btn-outline-dark float-right btn-sm">Topic Update</button></span>
                                }
                                else
                                {
                                    <span class="ml-0" style="vertical-align:middle;"><button type="button" id="btnSRU" class="btn btn-outline-dark float-right btn-sm">Record Update</button></span>
                                }
                            }

                        }

                }
                else if (Model.CurrentModel.Type == "5")
                { 
                    @if (@Model.CurrentModel.ParentIPFSCID == "")
                    {
                        <span class="ml-0" style="vertical-align:middle;"><button type="button" class="btn btn-outline-dark float-right btn-sm" id="btnArc">Archive</button></span>
                    }
                    else
                    {
                        @if (Model.CurrentModel.PastSuperBlock == 0)
                        {
                            if (@Model.CurrentModel.cidtype == "1")
                            {
                                <span class="ml-0" style="vertical-align:middle;"><button type="button" id="btnSAEU" class="btn btn-outline-dark float-right btn-sm">Archive - Suggested Evidence Update</button></span>
                            }
                            else if (@Model.CurrentModel.cidtype == "2")
                            {
                                <span class="ml-0" style="vertical-align:middle;"><button type="button" id="btnSATU" class="btn btn-outline-dark float-right btn-sm">Archive - Suggested Topic Update</button></span>
                            }
                            else
                            {
                                <span class="ml-0" style="vertical-align:middle;"><button type="button" id="btnSAU" class="btn btn-outline-dark float-right btn-sm">Archive - Suggested Record Update</button></span>
                            }
                        }
                        else
                        {
                            if (@Model.CurrentModel.cidtype == "1")
                            {
                                <span class="ml-0" style="vertical-align:middle;"><button type="button" id="btnSAEU" class="btn btn-outline-dark float-right btn-sm">Archive - Evidence Update</button></span>
                            }
                            else if (@Model.CurrentModel.cidtype == "2")
                            {
                                <span class="ml-0" style="vertical-align:middle;"><button type="button" id="btnSATU" class="btn btn-outline-dark float-right btn-sm">Archive - Topic Update</button></span>
                            }
                            else
                            {
                                <span class="ml-0" style="vertical-align:middle;"><button type="button" id="btnSAU" class="btn btn-outline-dark float-right btn-sm">Archive - Record Update</button></span>
                            }
                        }
                    }
            }

                    <input type="hidden" id="timetemp_@Model.CurrentModel.Id" value="@Model.CurrentModel.ProposalDate">
                </div>
            </div>

        </div>
        <div class="w-clearfix" style="margin-top:5px;">
            <p class="card-text">@Model.CurrentModel.ProposalSummary</p>
            @if (@Model.CurrentModel.Type != "5")
            {
                <iframe src="@Model.CurrentModel.ProposalDescriptionUrlRazor" sandbox="" style="width:100%;height:700px;" frameBorder="1"></iframe>
                <div class="col-12 text-right text-"><a id="url" target='_blank' href="https://@Model.CurrentModel.Hostname/ipfs/@Model.CurrentModel.ProposalDescriptionUrl">Archived Version</a></div>
            }
            else
            {
                @if (Model.CurrentModel.oglinksid != 0)
                {
                    <div class='text-left'>
                        <span contenteditable='false' class='og_@Model.CurrentModel.oglinksid'>
                            <div class='card'>
                                <div class='card-horizontal'>
                                    <img class='' style="width: 250px; height:auto; object-fit: cover" src='@Model.CurrentModel.oglinksimageurl' onerror="this.onerror=null; this.src='/images/lighthta.svg'">
                                    <div class='card-body'>
                                        <h4 class='card-title'>@Model.CurrentModel.oglinkstitle</h4>
                                        <p class='card-text'>@Model.CurrentModel.oglinksdescription</p>
                                        <i class='fas fa-link'> </i>
                                        <a id="urlchoice" href='@Model.CurrentModel.orgUrl' target='_blank' class='stretched-link'>@Model.CurrentModel.oglinkssitename</a>
                                    </div>
                                </div>
                                <div class='card-vertical'>
                                    <img class='' style="width: 100%; height:auto; object-fit: cover" src='@Model.CurrentModel.oglinksimageurl' onerror="this.onerror=null; this.src='/images/lighthta.svg'">
                                    <div class='card-body'>
                                        <h4 class='card-title'>@Model.CurrentModel.oglinkstitle</h4>
                                        <p class='card-text'>@Model.CurrentModel.oglinksdescription</p>
                                        <i class='fas fa-link'> </i>
                                        <a id="urlchoice" href='@Model.CurrentModel.orgUrl' target='_blank' class='stretched-link'>@Model.CurrentModel.oglinkssitename</a>
                                    </div>
                                </div>

                            </div>
                        </span>
                        <br>
                    </div>

                    <div class="col-12 text-right text-"><a id="url" target='_blank' href="https://@Model.CurrentModel.Hostname/ipfs/@Model.CurrentModel.ProposalDescriptionUrl">Archived Version</a></div>
                    <div class="col-12 text-right text-"><a id="url1" target='_blank' href="@Model.CurrentModel.orgUrl">Non-Archived Version</a></div>

                }
                else
                {
                    <div class='text-left'>
                        <span contenteditable='false' class='og_@Model.CurrentModel.oglinksid'>
                            <div class='card'>
                                <div class='card-horizontal'>
                                    <img class='' style="width: 250px; height:auto; object-fit: cover" src='/images/og.png'>
                                    <div class='card-body'>
                                        <h4 class='card-title'>No Preview Available</h4>
                                        <p class='card-text'>Click to view archived content</p>
                                        <i class='fas fa-link'> </i>
                                        <a id="url" href='https://@Model.CurrentModel.Hostname/ipfs/@Model.CurrentModel.ProposalDescriptionUrl' target='_blank' class='stretched-link'></a>
                                    </div>
                                </div>
                                <div class='card-vertical'>
                                    <img class='' style="width: 100%; height:auto; object-fit: cover" src='/images/og.png'>
                                    <div class='card-body'>
                                        <h4 class='card-title'>No Preview Available</h4>
                                        <p class='card-text'>Click to view archived content</p>
                                        <i class='fas fa-link'> </i>
                                        <a id="url" href='https://@Model.CurrentModel.Hostname/ipfs/@Model.CurrentModel.ProposalDescriptionUrl' target='_blank' class='stretched-link'></a>
                                    </div>
                                </div>

                            </div>
                        </span>
                        <br>
                    </div>
                    <div class="col-12 text-right text-"><a id="url" target='_blank' href="https://@Model.CurrentModel.Hostname/ipfs/@Model.CurrentModel.ProposalDescriptionUrl">Archived Version</a></div>
                    <div class="col-12 text-right text-"><a id="url1" target='_blank' href="@Model.CurrentModel.orgUrl">Non-Archived Version</a></div>
                }
            }


        </div>
        <div style="margin-top:5px; margin-bottom:10px;">
            <div class="row mt-4">
                <div class="col-4 mx-auto">
                    <div class="text-center">
                        @if (Model.CurrentModel.PastSuperBlock == 0)
                        {
                            <h4>Requested Payment:</h4>@Model.CurrentModel.PaymentAmount <label>HTA</label>
                        }
                        else
                        {
                            <h4>Requested Payment:</h4>@Model.CurrentModel.PaymentAmount <label>HTA</label>
                        }
                    </div>
                </div>
                <div class="col-4 mx-auto">
                    <div class="text-center">

                        @if (Model.CurrentModel.PastSuperBlock == 0)
                        {
                            <h4>Is Passing:</h4>

                            @if (Model.CurrentModel.CachedFunding == false)
                            {
                             
                                    @if (Model.CurrentModel.YesCount < 10)
                                    {
                                        <label>Needs at least 10 yes votes</label>
                                    }
                                    else
                                    {
                                        <label>Needs 10% more yes votes than no</label>
                                    }
                              
                            }
                            else
                            {
                                @Model.CurrentModel.CachedFunding
                            }
                        }
                        else
                        {
                            <h4>Status:</h4>
                            @if (Model.CurrentModel.Type == "1")
                            {
                                @if (Model.CurrentModel.CachedFunding)
                                {<label>Passed</label> }
                                else
                                { <label>Did not pass </label>}
                            }
                            else
                            {
                                @if (Model.CurrentModel.CachedLocked == true)
                                {<label>Locked</label> }
                                else
                                { <label>Did not pass </label>}
                            }
                        }

                    </div>
                </div>
                <div class="col-4 mx-auto">
                    <div class="text-center">
                        @if (Model.CurrentModel.PastSuperBlock == 0)
                        {
                            <h4>Days Left to Vote:</h4><label id="votingDeadline">Loading...</label>
                        }
                        else
                        {
                            <h4>Voting Cycle Status:</h4><label>Ended</label>
                        }

                    </div>
                </div>
            </div>
        </div>
        <div style="margin-bottom:45px;">
            <div class="voting">
                <div class="votingwrapper">
                    <div class="votingdown">VOTING</div>
                    @if (Model.CurrentModel.PastSuperBlock == 1)
                    {

                        @if (@Model.CurrentModel.sig == 1)
                        {
                            <img id="btnVoteYes_@Model.CurrentModel.Id" src="/images/up_arrow_small.svg" alt="" class="image-3 border border-secondary rounded" style="cursor: pointer;" data-toggle="popover" title="Previously Voted Yes" data-placement="top">
                            <div class="votingdown">@Model.CurrentModel.YesCount</div>
                        }
                        else
                        {
                            <img id="btnVoteYes_@Model.CurrentModel.Id" src="/images/up_arrow_small.svg" alt="" class="image-3" style="cursor: pointer;" data-toggle="popover" title="Vote Yes" data-placement="top">
                            <div class="votingdown">@Model.CurrentModel.YesCount</div>
                        }

                        @if (@Model.CurrentModel.sig == 2)
                        {
                            <img id="btnVoteNo_@Model.CurrentModel.Id" src="/images/down_arrow_small.svg" alt="" class="image-7 border border-secondary rounded" style="cursor: pointer;" data-toggle="popover" title="Previously Voted No" data-placement="top">
                            <div class="votingdown">@Model.CurrentModel.NoCount</div>
                        }
                        else
                        {
                            <img id="btnVoteNo_@Model.CurrentModel.Id" src="/images/down_arrow_small.svg" alt="" class="image-7" style="cursor: pointer;" data-toggle="popover" title="Vote No" data-placement="top">
                            <div class="votingdown">@Model.CurrentModel.NoCount</div>
                        }

                        @if (@Model.CurrentModel.sig == 3)
                        {
                            <img id="btnVoteAbstain_@Model.CurrentModel.Id" src="/images/vote_null.svg" alt="" class="image-3 border border-secondary rounded" style="cursor: pointer;" width="20px" data-toggle="popover" title="Previously Voted Abstain" data-placement="top">
                            <div class="votingdown">@Model.CurrentModel.AbstainCount</div>

                        }
                        else
                        {
                            <img id="btnVoteAbstain_@Model.CurrentModel.Id" src="/images/vote_null.svg" alt="" class="image-3" style="cursor: pointer;" width="20px" data-toggle="popover" title="Previously Voted Abstain" data-placement="top">
                            <div class="votingdown">@Model.CurrentModel.AbstainCount</div>
                        }
                        <img id="btnVoteManual_@Model.CurrentModel.Id" src="/images/manual.svg" alt="" class="image-3" style="cursor: pointer;" width="20px" data-content="gobject vote-many @Model.CurrentModel.Hash funding <yes|no|abstain>" data-placement="top" data-toggle="popover" title="Manually vote on this proposal (HistoriaCore GUI - Tools - Debugconsole):">

                    }
                    else
                    {
                        @if (@Model.CurrentModel.Type == "4")
                        {
                            @if (@Model.CurrentModel.CachedLocked == true)
                            {
                                <p>Past Voting Cycle: Locked</p>
                            }
                            else
                            {
                                <p>Past Voting Cycle: This record did not pass and will be deleted</p>
                            }
                        }
                        else
                        {
                            @if (@Model.CurrentModel.CachedLocked == true)
                            {
                                <p>Past Voting Cycle: Passed</p>
                            }
                            else
                            {
                                <p>Past Voting Cycle</p>
                            }

                        }
                    }
                </div>
            </div>

            <div class="usertabs">
                <div class="social">
                    <span id="btnEdit_@Model.CurrentModel.Id" style="vertical-align:central; cursor: pointer;" alt="" data-toggle="popover" title="Suggest Edit" data-placement="top"><i class="fa fa-pencil fa-lg"></i></span><font size="4">&nbsp;&nbsp;</font>
                    <span id="btnEvidence_@Model.CurrentModel.Id" style="vertical-align:central; cursor: pointer;" alt="" data-toggle="popover" title="Add Additional Evidence" data-placement="top"><i class="fa fa-lightbulb fa-lg"></i></span><font size="4">&nbsp;&nbsp;</font>
                    <span id="btnTopic_@Model.CurrentModel.Id" style="vertical-align:central; cursor: pointer;" alt="" data-toggle="popover" title="Add to Topic" data-placement="top"><i class="fa fa-hashtag fa-lg"></i></span><font size="4">&nbsp;&nbsp;</font>
                    <span id="btnTranslation_@Model.CurrentModel.Id" style="vertical-align:central; cursor: pointer;" alt="" data-toggle="popover" title="Add Translation - COMING SOON" data-placement="top"><i class="fa fa-language fa-lg"></i></span><font size="4">&nbsp;&nbsp;</font>
                </div>
            </div>


        </div>



        <div class="text-center">
            <div class="card-body">
                <div class="row">
                    <div class="col-12">
                        <ul id="tabsJustified" class="nav nav-tabs" style="background:#fff">
                            <li class="nav-item"><a id="topicsTab" href="#topics" data-target="#topics" data-toggle="tab" role="tab" class="nav-link small text-uppercase active">Topics</a></li>
                            <li class="nav-item"><a id="evidenceTab" href="#evidence" data-target="#evidence" data-toggle="tab" role="tab" class="nav-link small text-uppercase">Evidence</a></li>
                            <li class="nav-item"><a id="versionsTab" href="#versions" data-target="#versions" data-toggle="tab" role="tab" class="nav-link small text-uppercase">Versions</a></li>
                        </ul>
                        <div class="tab-content">

                            <div id="topics" class="tab-pane fade show active">
                                <div class="list-group">
                                    <table class="table table-striped w-100" id="topicsTable">
                                        <thead>
                                            <tr>
                                                <th>Date Added</th>
                                                <th>Name</th>
                                                <th>Description</th>
                                            </tr>
                                        </thead>
                                    </table>
                                </div>
                            </div>


                            <div id="evidence" class="tab-pane fade show">
                                <div class="list-group">
                                    <table class="table table-striped w-100" id="evidenceTable">
                                        <thead>
                                            <tr>
                                                <th>Date Added</th>
                                                <th>Name</th>
                                                <th>Description</th>
                                            </tr>
                                        </thead>
                                    </table>
                                </div>
                            </div>

                            <div id="versions" class="tab-pane fade show">
                                <div class="list-group">
                                    <table class="table responsive table-striped w-100" id="versionsTable">
                                        <thead>
                                            <tr>
                                                <th>Date Added</th>
                                                <th>Name</th>
                                                <th>Description</th>
                                            </tr>
                                        </thead>
                                    </table>
                                </div>
                            </div>


                            <div class="row">
                                <br /><br />
                            </div>


                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <br /><br /><br />
    <div class="modal fade" role="dialog" id="voteModal" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <form id="frmSubmitVote" class="needs-validation" role="form" novalidate>
                    <div class="modal-header">
                        <h5 class="modal-title">Vote</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        @Html.AntiForgeryToken()
                        <input type="hidden" id="tbProposalId" />
                        <div class="row text-center">
                            <div class="col">
                                <div class="btn-group btn-group-toggle" data-toggle="buttons">
                                    <label class="btn btn-secondary">
                                        <input type="radio" name="voteOptions" id="yes" autocomplete="off"> Vote YES
                                    </label>
                                    <label class="btn btn-secondary">
                                        <input type="radio" name="voteOptions" id="no" autocomplete="off"> Vote NO
                                    </label>
                                    <label class="btn btn-secondary">
                                        <input type="radio" name="voteOptions" id="abstain" autocomplete="off"> Vote ABS
                                    </label>
                                </div>
                            </div>
                        </div>
                        <br />
                        <div class="row">
                            <div class="col">
                                <div class="form-group">
                                    <ul>
                                        <li>If it's a record, should it be permanently added?</li>
                                        <li>Is accurate?</li>
                                        <li>Is it nicely formatted?</li>
                                        <li>Is the requested amount appropriate?</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <hr />
                        <div class="row">
                            <div class="col">
                                <b>Voting with these Masternode(s):</b><br />
                                <div id="masternodes" class="form-group">

                                    <ul>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <hr />
                        <div class="row">
                            <div class="col">
                                <b>Marketing</b><br>For the best chance to get this document passed by the voters, market and lobby for it!<br><br>Share on social media:<br><br>
                                <div class="row">
                                    <div class="col-sm"><a href="http://x.com/share?text=@Model.CurrentModel.ProposalName-@Model.CurrentModel.ProposalSummary&url=https://historia.network/id/@Model.CurrentModel.Hash&hashtags=#historia,#blockchain,#altcoins,#history,@@historiasys" target="_blank"><i class="fa-brands fa-twitter"></i> X.com</a></div>
                                    <div class="col-sm"><a href="https://www.facebook.com/sharer/sharer.php?u=https://historia.network/id/@Model.CurrentModel.Hash" target="_blank"><i class="fa-brands fa-facebook-f"></i> Facebook</a></div>
                                </div>

                                <div class="row">
                                    <div class="col-sm"><a href="https://discordapp.com/invite/b3FJPpn" target="_blank"><i class="fa-brands fa-discord"></i> Discord</a></div>

                                    <div class="col-sm">  <a href="https://t.me/share/url?url=https://historia.network/id/@Model.CurrentModel.Hash" target="_blank"><i class="fa-brands fa-telegram"></i> Telegram</a></div>
                                </div>

                                <div class="row">
                                    <div class="col-sm"><a href="https://www.reddit.com/submit?url=https://historia.network/id/@Model.CurrentModel.Hash" target="_blank"><i class="fa-brands fa-reddit"></i> Reddit</a></div>
                                    <div class="col-sm"><a href="mailto:?subject=Check%20out%20this%20link&body=Heres%20the%20link%3A%2https://historia.network/id/@Model.CurrentModel.Hash"><i class="fa fa-envelope" aria-hidden="true"></i> Via Email</a></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
                <div class="modal-footer">
                    <button id="btnSubmitVote" class="btn btn-secondary" type="submit">Submit Vote</button>
                </div>
            </div>
        </div>
    </div>

</div>


@section Scripts {
    <script src="/lib/cryptojs/crypto-js.min.js"></script>
    <script src="/lib/jsrassign/jsrsasign-all-min.js"></script>
    <script type="text/javascript">

        function hex2a(hexx) {
            var hex = hexx.toString();//force conversion
            var str = '';
            for (var i = 0; (i < hex.length && hex.substr(i, 2) !== '00'); i += 2)
                str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
            return str;
        }

        function getRandomInt(min, max) {
          return Math.floor(Math.random() * (max - min + 1) + min);
        }

        function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }


        var UTC = new Date().getTime();
        function localUTCDateC(id, submittedAt) {
            const now = new Date();
            const submitted = new Date(submittedAt);

            const userTimezoneOffset = submitted.getTimezoneOffset(); // get user's timezone offset in minutes
            const timezoneOffsetMs = userTimezoneOffset * 60 * 1000; // convert minutes to milliseconds
            const adjustedSubmitted = new Date(submitted.getTime() - timezoneOffsetMs);

            const elapsed = now.getTime() - adjustedSubmitted.getTime(); // elapsed time in milliseconds

            const elapsedSeconds = Math.floor(elapsed / 1000);
            const elapsedMinutes = Math.floor(elapsed / (1000 * 60));
            const elapsedHours = Math.floor(elapsed / (1000 * 60 * 60));
            const elapsedDays = Math.floor(elapsed / (1000 * 60 * 60 * 24));
            const elapsedWeeks = Math.floor(elapsed / (1000 * 60 * 60 * 24 * 7));

            const currentYear = now.getFullYear();
            const currentMonth = now.getMonth();
            const currentDay = now.getDate();
            const submittedYear = adjustedSubmitted.getFullYear();
            const submittedMonth = adjustedSubmitted.getMonth();
            const submittedDay = adjustedSubmitted.getDate();

            let elapsedMonths = (currentYear - submittedYear) * 12;
            elapsedMonths -= submittedMonth;
            elapsedMonths += currentMonth;
            elapsedMonths = elapsedMonths <= 0 ? 0 : elapsedMonths;

            if (elapsedSeconds < 60) {
                $('#time_@Model.CurrentModel.Id').text(" — " + `${elapsedSeconds} seconds ago`);
            } else if (elapsedMinutes < 60) {
                $('#time_@Model.CurrentModel.Id').text(" — " + `${elapsedMinutes} minutes ago`);
            } else if (elapsedHours < 24) {
                $('#time_@Model.CurrentModel.Id').text(" — " + `${elapsedHours} hours ago`);
            } else if (elapsedHours > 24 && elapsedHours < 48) {
                $('#time_@Model.CurrentModel.Id').text(" — " + `1 day ago`);
            } else if (elapsedDays < 7) {
                $('#time_@Model.CurrentModel.Id').text(" — " + `${elapsedDays} days ago`);
            } else if (elapsedWeeks < 4) {
                $('#time_@Model.CurrentModel.Id').text(" — " + `${elapsedWeeks} weeks ago`);
            } else if (elapsedMonths < 1 && elapsedMonths > 2) {
                $('#time_@Model.CurrentModel.Id').text(" — " + '1 month ago');
            } else if (elapsedMonths < 2 && elapsedMonths > 3) {
                $('#time_@Model.CurrentModel.Id').text(" — " + '2 months ago');
            } else if (elapsedMonths < 3 && elapsedMonths > 4) {
                $('#time_@Model.CurrentModel.Id').text(" — " + '3 months ago');
            } else {
                const options = { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' };
                $('#time_@Model.CurrentModel.Id').text(" — " + adjustedSubmitted.toLocaleDateString(undefined, options));
            }
        }

        var hasMN = false;

        masternodeNames = [];
        function GetMyMasternodes()
        {
            $.get('@Url.Action("GetMyMasternodes", "Masternode", new { Area = "Masternode" })', null, function (data) {
                if (data.length == 0) {
                    hasMN = false;
                } else {
                    data.forEach(function (masternodes) {
                        masternodeNames.push(masternodes.name);
                    });
                    hasMN = true;
                }
            });

        }

        var votingProposalId = @Model.CurrentModel.Id;
        var votingParentHash = null;

        var vote = 'yes';


        var hideAllPopovers = function () {
            $('.popup-marker').each(function () {
                $(this).popover('hide');
            });
        };

        $(document).on('click', function (e) {
            hideAllPopovers();
        });

        $(document).ready(function () {
            setTimeout(function () {
                $('#topicsTab').trigger('shown.bs.tab');
            }, 100); // Adjust the delay as needed

            var IpfsPid = "@Model.CurrentModel.Hash";
            $('#versionsTab').on('shown.bs.tab', function (e) {
                if ($('#versionsTab').hasClass('active')) {
                    $.getJSON('@Url.Action("GetVersionsDetails", "Proposals", new { Area = "Proposals" })', { phash: IpfsPid, level: 0 }, function (tableData1) {

                        var verisonsTable = $('#versionsTable').DataTable({
                            destroy: true,
                            data: JSON.parse(tableData1),
                            order: [[0, '']],
                            info: false,
                            searching: false,
                            fixedHeader: false,
                            lengthChange: false,
                            autoWidth: true,
                            responsive: true,
                            columnDefs: [
                                {
                                    targets: '_all', // Apply to all columns
                                    className: 'dt-body-left'
                                }
                            ],
                            columns: [
                                { data: "DateAdded" },
                                {
                                    data: null,
                                    render: function (data, type, full, meta) {

                                        return ('<a href="/Proposals/Proposals/ProposalDetails?hash=' + data.ProposalHash + '">' + data.Name + '</a href>');
                                    }
                                },
                                {
                                    data: null,
                                    render: function (data, type, full, meta) {

                                        return ('<a href="/Proposals/Proposals/ProposalDetails?hash=' + data.ProposalHash + '">' + data.Summary + '</a href>');
                                    }
                                }

                            ],
                        });
                    });
                }
            });

            $('#evidenceTab').on('shown.bs.tab', function (e) {
                if ($('#evidenceTab').hasClass('active')) {
                    $.getJSON('@Url.Action("GetEvidenceDetails", "Proposals", new { Area = "Proposals" })', { phash: IpfsPid, level: 0 }, function (tableData2) {

                        var evidenceTable = $('#evidenceTable').DataTable({
                            destroy: true,
                            data: JSON.parse(tableData2),
                            order: [[0, '']],
                            info: false,
                            searching: false,
                            fixedHeader: false,
                            lengthChange: false,
                            autoWidth: false,
                            responsive: true,
                            columnDefs: [
                                {
                                    targets: '_all', // Apply to all columns
                                    className: 'dt-body-left'
                                }
                            ],
                            columns: [
                                { data: "DateAdded" },
                                {
                                    data: null,
                                    render: function (data, type, full, meta) {

                                        return ('<a href="/Proposals/Proposals/ProposalDetails?hash=' + data.ProposalHash + '">' + data.Name + '</a href>');
                                    }
                                },
                                {
                                    data: null,
                                    render: function (data, type, full, meta) {

                                        return ('<a href="/Proposals/Proposals/ProposalDetails?hash=' + data.ProposalHash + '">' + data.Summary + '</a href>');
                                    }
                                }

                            ],
                        });
                    });
                }
            });

            $('#topicsTab').on('shown.bs.tab', function (e) {
                if ($('#topicsTab').hasClass('active')) {
                    $.getJSON('@Url.Action("GetTopicsDetails", "Proposals", new { Area = "Proposals" })', { phash: IpfsPid, level: 0 }, function (tableData3) {
                        var topicsTable = $('#topicsTable').DataTable({
                            destroy: true,
                            data: JSON.parse(tableData3),
                            order: [[0, '']],
                            info: false,
                            searching: false,
                            fixedHeader: false,
                            lengthChange: false,
                            autoWidth: false,
                            responsive: true,
                            columnDefs: [
                                {
                                    targets: '_all', // Apply to all columns
                                    className: 'dt-body-left'
                                }
                            ],
                            columns: [
                                { data: "DateAdded" },
                                {
                                    data: null,
                                    render: function (data, type, full, meta) {
                                        return ('<a href="/Proposals/Proposals/ProposalDetails?hash=' + data.ProposalHash + '">' + data.Name + '</a>');
                                    }
                                },
                                {
                                    data: null,
                                    render: function (data, type, full, meta) {
                                        return ('<a href="/Proposals/Proposals/ProposalDetails?hash=' + data.ProposalHash + '">' + data.Summary + '</a>');
                                    }
                                }
                            ],
                        });
                    });
                }
            });

            $('#btnSEU').on('click', function () {

                Swal.fire({
                    title: 'What is Suggested Evidence Update?',
                    type: 'alert',
                    html: "Suggested Evidence Update is a new record, that is supporting or opposing the original record.<br><br>Learn more <a href='/Home/HowTo' style='text-decoration: underline;'>here</a>",
                    confirmButtonColor: "#48B5C4",
                    confirmButtonText: 'Ok'
                });
            });

            $('#btnPro').on('click', function () {
                Swal.fire({
                    title: 'What is a Proposal?',
                    type: 'alert',
                    html: "A proposal is a temporary object that lets voters decide the direction of the Historia Network blockchain. <br><br>Learn more <a href='/Home/HowTo' style='text-decoration: underline;'>here</a>",
                    confirmButtonColor: "#48B5C4",
                    confirmButtonText: 'Ok'
                });
            });

            $('#btnRec').on('click', function () {
                Swal.fire({
                    title: 'What is Record?',
                    type: 'alert',
                    html: "A record is a object that if the voters approve, then will be a permanently added to the Historia Network blockchain.<br><br>Learn more <a href='/Home/HowTo' style='text-decoration: underline;'>here</a>",
                    confirmButtonColor: "#48B5C4",
                    confirmButtonText: 'Ok'
                });
            });

            $('#btnArc').on('click', function () {
                Swal.fire({
                    title: 'What is a Archive?',
                    type: 'alert',
                    html: "An Archive is similar to a record, but is used to archive a web page at the current point in time.<br><br>Learn more <a href='/Home/HowTo' style='text-decoration: underline;'>here</a>",
                    confirmButtonColor: "#48B5C4",
                    confirmButtonText: 'Ok'
                });
            });

            $('#btnSTU').on('click', function () {

                Swal.fire({
                    title: 'What is Suggested Topic Update?',
                    type: 'alert',
                    html: "Suggested Topic Update is a new record, that adding a topic to the original record.<br><br>Learn more <a href='/Home/HowTo' style='text-decoration: underline;'>here</a>",
                    confirmButtonColor: "#48B5C4",
                    confirmButtonText: 'Ok'
                });
            });

            $('#btnSRU').on('click', function () {

                Swal.fire({
                    title: 'What is Suggested Record Update?',
                    type: 'alert',
                    html: "Suggested Record Update is a new record, that is suggest an edit to a original record.<br><br>Learn more <a href='/Home/HowTo' style='text-decoration: underline;'>here</a>",
                    confirmButtonColor: "#48B5C4",
                    confirmButtonText: 'Ok'
                });
            });
            $('#btnSAEU').on('click', function () {

                Swal.fire({
                    title: 'What is Suggested Archive Evidence Update?',
                    type: 'alert',
                    html: "Suggested Archive Evidence Update is a new record, that is supporting or opposing the original record with a new archive.<br><br>Learn more <a href='/Home/HowTo' style='text-decoration: underline;'>here</a>",
                    confirmButtonColor: "#48B5C4",
                    confirmButtonText: 'Ok'
                });
            });
            $('#btnSATU').on('click', function () {

                Swal.fire({
                    title: 'What is Suggested Archive Topic Update?',
                    type: 'alert',
                    html: "Suggested Archive Topic Update is a new record, that adding a topic to the original record with a new archive.<br><br>Learn more <a href='/Home/HowTo' style='text-decoration: underline;'>here</a>",
                    confirmButtonColor: "#48B5C4",
                    confirmButtonText: 'Ok'
                });
            });
            $('#btnSAU').on('click', function () {

                Swal.fire({
                    title: 'What is Suggested Archive Update?',
                    type: 'alert',
                    html: "Suggested Archive Update is a new record, that is shows the original record archive has been updated. This is rare.<br><br>Learn more <a href='/Home/HowTo' style='text-decoration: underline;'>here</a>",
                    confirmButtonColor: "#48B5C4",
                    confirmButtonText: 'Ok'
                });
            });

            $('body').on('click', function (e) {
                if ($(e.target).data('toggle') !== 'popover'
                    && $(e.target).parents('[data-toggle="popover"]').length === 0
                    && $(e.target).parents('.popover.in').length === 0) {
                    $('[data-toggle="popover"]').popover('hide');
                }
            });
            var dd1 = $('#timetemp_@(Model.CurrentModel.Id)').val();

            $('#urlchoice').click(function (event) {
                event.preventDefault(); // prevent the link from following the URL

                Swal.fire({
                    title: 'Which version do you want to open?',
                    icon: 'warning',
                    showDenyButton: true,
                    showCancelButton: false,
                    confirmButtonColor: '#48B5C4',
                    denyButtonColor: '#d33',
                    confirmButtonText: 'Archived',
                    denyButtonText: 'Non-Archived',
                    showCloseButton: true // add an "X" button to close the dialog
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.open($('#url').attr('href'), '_blank'); // open the link URL in a new tab
                    } else if (result.isDenied) {
                        window.open($('#url1').attr('href'), '_blank') // follow the link URL in the same tab
                    } else {
                        // do nothing if the dialog is dismissed
                    }
                });
            });



            $('#url').click(function (event) {
                event.preventDefault(); // prevent the link from following the URL

                Swal.fire({
                    title: 'Offsite Link',
                    text: 'This will take you offsite. Are you sure you would like to continue?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#48B5C4',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, continue',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.open($('#url').attr('href'), '_blank');  // follow the link URL
                    }
                });
            });


            $('#url1').click(function (event) {
                event.preventDefault(); // prevent the link from following the URL

                Swal.fire({
                    title: 'Offsite Link',
                    text: 'This will take you offsite. Are you sure you would like to continue?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#48B5C4',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, continue',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.open($('#url1').attr('href'), '_blank');  // follow the link URL
                    }
                });
            });

            localUTCDateC(@Model.CurrentModel.Id, dd1);

            $.getJSON('@Url.Action("GetCurrentSuperBlockInfo", "Masternode", new { Area = "Masternode" })', function (result) {
                result = JSON.parse(result);
                _currentSuperBlock = result.result.currentBlock;
                _nextSuperBlock = result.result.nextsuperblock;
                var delta = _nextSuperBlock - _currentSuperBlock;
                daysToSuperBlock = (((delta * 2.5) / 60) / 24);

                var votingDeadline = 0;
                if (daysToSuperBlock < 2) {
                    $('#votingDeadline').html("Past Cycle - In Processing");
                } else {
                    daysToSuperBlock = daysToSuperBlock - 2;
                    $('#votingDeadline').html(daysToSuperBlock.toPrecision(4));
                }

            });



            var verisonsTable = $('#versionsTable').DataTable({
                data: null,
                info: false,
                searching: false,
			    fixedHeader: false,
			    lengthChange: false,
			    autoWidth: false,
			    responsive: false,
			    columns: [
                    { data: "DateAdded" },
                    { data: "Name" },
                    { data: "Description" }

			    ],
            });

            var evidenceTable = $('#evidenceTable').DataTable({
                data: null,
                info: false,
                searching: false,
                fixedHeader: false,
                lengthChange: false,
                autoWidth: false,
                responsive: false,
                columns: [
                    { data: "DateAdded" },
                    { data: "Name" },
                    { data: "Description" }

                ],
            });

            var topicsTable = $('#topicsTable').DataTable({
                data: null,
                info: false,
                searching: false,
                fixedHeader: false,
                lengthChange: false,
                autoWidth: false,
                responsive: false,
                columns: [
                    { data: "DateAdded" },
                    { data: "Name" },
                    { data: "Description" }

                ],
            });




            var url = /(https?:\/\/[^\s]+)/g;

            var oldurltmp = "";
            var urltmp = "";
            var output = "";

            GetMyMasternodes();

            $('#btnVoteManual_@(Model.CurrentModel.Id)').on('click', function() {
                Swal.fire({
                    title: "Manual Vote",
                    html: '<div style="text-align: left;">If you have a voting node setup in your HistoriaCore Desktop wallet, you can vote manually by going to HistoriaCore -> Tools -> Debug Console and copying/pasting one of these options from below:<br><br><b>To vote Yes:</b> gobject vote-many @Model.CurrentModel.Hash funding yes<br><br><b>To vote No:</b> gobject vote-many @Model.CurrentModel.Hash funding no<br><br><b>To Abstain:</b> gobject vote-many @Model.CurrentModel.Hash funding abstain</div>',
                    confirmButtonColor: "#48B5C4",
                    confirmButtonText: 'Ok'
               });
            });

            $('#btnVoteYes_@Model.CurrentModel.Id').on('click', function () {
                if (hasMN == true) {
                    $('#voteYes').parent().addClass('active').siblings().removeClass('active');
                    $('#voteYes').prop("checked", true);
                    $('#voteModal').appendTo("body").modal('show');
                    $("#masternodes ul").empty();
                    masternodeNames.forEach(function (name) {
                        $("#masternodes ul").append("<li>" + name + "</li>");
                    });
                    votingProposalId = @Model.CurrentModel.Id;
                    votingParentHash = '@Model.CurrentModel.Hash';
                    vote = 'yes';
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: 'You do not have any nodes registered to vote with. Add you voting keys on the My Masternodes page',
                        type: 'error',
                        confirmButtonColor: "#48B5C4",
                        confirmButtonText: 'Ok'
                    });
                }
            });
            $('#btnVoteNo_@Model.CurrentModel.Id').on('click', function () {
                if (hasMN == true) {
                    $('#voteYes').parent().addClass('active').siblings().removeClass('active');
                    $('#voteYes').prop("checked", true);
                    $('#voteModal').appendTo("body").modal('show');
                    $("#masternodes ul").empty();
                    masternodeNames.forEach(function (name) {
                        $("#masternodes ul").append("<li>" + name + "</li>");
                    });
                    votingProposalId = @Model.CurrentModel.Id;
                    votingParentHash = '@Model.CurrentModel.Hash';
                    vote = 'no';
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: 'You do not have any nodes registered to vote with. Add you voting keys on the My Masternodes page.',
                        type: 'error',
                        confirmButtonColor: "#48B5C4",
                        confirmButtonText: 'Ok'
                    });
                }
            });
            $('#btnVoteAbstain_@Model.CurrentModel.Id').on('click', function () {
                if (hasMN == true) {
                    $('#voteYes').parent().addClass('active').siblings().removeClass('active');
                    $('#voteYes').prop("checked", true);
                    $('#voteModal').appendTo("body").modal('show');
                    $("#masternodes ul").empty();
                    masternodeNames.forEach(function (name) {
                        $("#masternodes ul").append("<li>" + name + "</li>");
                    });
                    votingProposalId = @Model.CurrentModel.Id;
                    votingParentHash = '@Model.CurrentModel.Hash';
                    vote = 'abstain';
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: 'You do not have any nodes registered to vote with. Add you voting keys on the My Masternodes page.',
                        type: 'error',
                        confirmButtonColor: "#48B5C4",
                        confirmButtonText: 'Ok'
                    });
                }
            });


            $('#btnDialog_@Model.CurrentModel.Id').popover({
                html: true,
                content: function () {
                    return $('#popover-content').html();
                }
            });


            $('#btnEvidence_@Model.CurrentModel.Id').on('click', function () {

                votingProposalId = @Model.CurrentModel.Id;
                votingParentHash = '@Model.CurrentModel.Hash';
                    (async () => {

                        const { value: type } = await Swal.fire({
                            title: 'Select Evidence Type',
                            input: 'select',
                            confirmButtonColor: "#48B5C4",
                            inputOptions: {
                                record: 'Record',
                                archive: 'Archive',
                            },
                            inputPlaceholder: 'Select a type',
                            showCancelButton: true,
                            inputValidator: (value) => {
                                return new Promise((resolve) => {
                                    if (value === 'record' || value === 'archive') {
                                        resolve()
                                    } else {
                                        resolve('You need to select a type :)')
                                    }
                                })
                            }
                        })

                        if (type === "record") {
                            const { value: template } = await Swal.fire({
                                title: 'Select Template',
                                input: 'select',
                                confirmButtonColor: "#48B5C4",
                                inputOptions: {
                                    none: 'None',
                                    news: 'Article #1'
                                    //wiki: 'Wiki'
                                },
                                inputPlaceholder: 'Select a template',
                                showCancelButton: true,
                                inputValidator: (value) => {
                                    return new Promise((resolve) => {
                                        if (value === 'none' || value === 'news' || value === 'wiki') {
                                            resolve()
                                        } else {
                                            resolve('You need to select a template')
                                        }
                                    })
                                }
                            });

                            if (template === "none") {
                               window.location = '/Create/Create/CreateEdit?Id=0&Type=4&Template=none&Pid=@Model.CurrentModel.Hash&CidType=1';
                            } else if (template === "news") {
                               window.location = '/Create/Create/CreateEdit?Id=0&Type=4&Template=news&Pid=@Model.CurrentModel.Hash&CidType=1';
                            } else if (template === "wiki") {
                               window.location = '/Create/Create/CreateEdit?Id=0&Type=4&Template=wiki&Pid=@Model.CurrentModel.Hash&CidType=1';
                            }

                        } else if (type === "archive") {
                            $.getJSON('@Url.Action("GetArchiveDrafts", "Create", new { Area = "Create" })', async function (tableData) {
                                var drafts = JSON.parse(tableData); // Assuming this is an array of objects

                                // Check if there are no drafts and inform the user if so
                                if (drafts.length === 0) {
                                    Swal.fire({
                                        title: 'No Queued Archives',
                                        text: 'You have no queued archives.',
                                        type: 'info',
                                        confirmButtonColor: "#48B5C4",
                                        confirmButtonText: 'Ok'
                                    });
                                    return; // Exit the function early
                                }

                                // Convert drafts into a format that can be used by inputOptions
                                var inputOptions = { none: 'None' }; // Initialize with a 'None' option
                                drafts.forEach(function (draft) {
                                    inputOptions[draft.Id] = draft.draftName; // Use draft ID as the key and draftName as the value
                                });

                                const { value: templateId } = await Swal.fire({
                                    title: 'Select Queued Archive',
                                    input: 'select',
                                    confirmButtonColor: "#48B5C4",
                                    inputOptions: inputOptions, // Use the dynamically created options
                                    inputPlaceholder: 'Select a queued archive',
                                    showCancelButton: true,
                                    inputValidator: (value) => {
                                        return new Promise((resolve) => {
                                            if (value === 'none' || Object.keys(inputOptions).includes(value)) {
                                                resolve();
                                            } else {
                                                resolve('You need to select a queued archive');
                                            }
                                        });
                                    }
                                });
                                if (templateId && templateId !== 'none') {
                                    window.location.href = `/Create/Create/CreateBuilder?Id=${templateId}&Type=5&Template=none&CidType=1&Pid=@Model.CurrentModel.Hash`;
                                }
                            }).fail(function (jqXHR, textStatus, errorThrown) {
                                console.log("error: " + textStatus + ", " + errorThrown + ", " + jqXHR);

                            });
                        }
                    })()

                    return false;

            });

            $('#btnEdit_@Model.CurrentModel.Id').on('click', function () {
                votingProposalId = @Model.CurrentModel.Id;
                votingParentHash = '@Model.CurrentModel.Hash';

                    Swal.fire({
                    title: "Are you sure you want to suggest a edit?",
                        html: '<h5>This will take you to the Create page</h5>',
                        type: "warning",
                        confirmButtonColor: "#48B5C4",
                        allowOutsideClick: false,
                        allowEscapeKey: false,

                        closeOnClickOutside: false,
                        backdrop: true,
                        showCancelButton: true,
                        confirmButtonClass: "btn-danger",
                        confirmButtonText: "Yes, lets go!",
                        cancelButtonText: "No, not right now!",
                        closeOnConfirm: true,
                        closeOnCancel: true,


                    }).then(function(confirm) {
                        if (confirm.value)
                        {
                            window.location = '/Create/Create/CreateEdit?Id=' + votingProposalId + '&Type=' + @Model.CurrentModel.Type + '&Template=none&Pid=' + votingParentHash + '&CidType=0' + '&isDraft=0';
                        }

                    })


            });

            $('#btnTopic_@Model.CurrentModel.Id').on('click', function () {
                votingProposalId = @Model.CurrentModel.Id;
                votingParentHash = '@Model.CurrentModel.Hash';
                    (async () => {

                        const { value: type } = await Swal.fire({
                            title: 'Select Topic Type',
                            input: 'select',
                            confirmButtonColor: "#48B5C4",
                            inputOptions: {
                                record: 'Record',
                                archive: 'Archive',
                            },
                            inputPlaceholder: 'Select a type',
                            showCancelButton: true,
                            inputValidator: (value) => {
                                return new Promise((resolve) => {
                                    if (value === 'record' || value === 'archive') {
                                        resolve()
                                    } else {
                                        resolve('You need to select a type :)')
                                    }
                                })
                            }
                        })

                        if (type === "record") {
                            const { value: template } = await Swal.fire({
                                title: 'Select Template',
                                input: 'select',
                                confirmButtonColor: "#48B5C4",
                                inputOptions: {
                                    none: 'None',
                                    news: 'Article #1'
                                    //wiki: 'Wiki'
                                },
                                inputPlaceholder: 'Select a template',
                                showCancelButton: true,
                                inputValidator: (value) => {
                                    return new Promise((resolve) => {
                                        if (value === 'none' || value === 'news' || value === 'wiki') {
                                            resolve()
                                        } else {
                                            resolve('You need to select a template')
                                        }
                                    })
                                }
                            });

                            if (template === "none") {
                                window.location = '/Create/Create/CreateEdit?Id=0&Type=4&Template=none&Pid=@Model.CurrentModel.Hash&CidType=2';

                            } else if (template === "news") {
                                window.location = '/Create/Create/CreateEdit?Id=0&Type=4&Template=news&Pid=@Model.CurrentModel.Hash&CidType=2';

                            } else if (template === "wiki") {
                                window.location = '/Create/Create/CreateEdit?Id=0&Type=4&Template=wiki&Pid=@Model.CurrentModel.Hash&CidType=2';
                            }

                        } else if (type === "archive") {
                            $.getJSON('@Url.Action("GetArchiveDrafts", "Create", new { Area = "Create" })', async function (tableData) {
                                var drafts = JSON.parse(tableData); // Assuming this is an array of objects

                                // Check if there are no drafts and inform the user if so
                                if (drafts.length === 0) {
                                    Swal.fire({
                                        title: 'No Queued Archives',
                                        text: 'You have no queued archives.',
                                        type: 'info',
                                        confirmButtonColor: "#48B5C4",
                                        confirmButtonText: 'Ok'
                                    });
                                    return; // Exit the function early
                                }

                                // Convert drafts into a format that can be used by inputOptions
                                var inputOptions = { none: 'None' }; // Initialize with a 'None' option
                                drafts.forEach(function (draft) {
                                    inputOptions[draft.Id] = draft.draftName; // Use draft ID as the key and draftName as the value
                                });

                                const { value: templateId } = await Swal.fire({
                                    title: 'Select Queued Archive',
                                    input: 'select',
                                    confirmButtonColor: "#48B5C4",
                                    inputOptions: inputOptions, // Use the dynamically created options
                                    inputPlaceholder: 'Select a queued archive',
                                    showCancelButton: true,
                                    inputValidator: (value) => {
                                        return new Promise((resolve) => {
                                            if (value === 'none' || Object.keys(inputOptions).includes(value)) {
                                                resolve();
                                            } else {
                                                resolve('You need to select a queued archive');
                                            }
                                        });
                                    }
                                });

                                if (templateId && templateId !== 'none') {
                                    window.location.href = `/Create/Create/CreateBuilder?Id=${templateId}&Type=5&Template=none&CidType=2&Pid=@Model.CurrentModel.Hash`;

                                }

                            }).fail(function (jqXHR, textStatus, errorThrown) {
                                console.log("error: " + textStatus + ", " + errorThrown + ", " + jqXHR);

                            });
                        }
                    })()
                    return false;
            });

            $('#btnTranslation_@Model.CurrentModel.Id').on('click', function () {
                votingProposalId = @Model.CurrentModel.Id;
                votingParentHash = '@Model.CurrentModel.Hash';
                    Swal.fire({
                    title: "Add Translation - Coming Soon",
                        html: '<h5>This will allow you to add a translation</h5>',
                        type: "warning",
                        confirmButtonColor: "#48B5C4",
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        closeOnClickOutside: false,
                        backdrop: true,
                        confirmButtonClass: "btn-danger",
                        confirmButtonText: "Ok",
                        closeOnConfirm: true,


                    })

            });



            $('input[name="voteOptions"]').change(function (evt) {
                    vote = evt.target.id;
            });

        });

        var voteDataArray = [];
        $('#btnSubmitVote').on('click', async function (evt) {
            evt.preventDefault(); // Use preventDefault to stop the form from submitting
            //evt.stopPropagation();
            // Async function to get masternode private key
            async function getMasternodePrivKey() {
                try {
                    let response = await $.getJSON('@(Url.Action("GetMasternodePrivKey", "Masternode", new { Area = "Masternode" }))');
                    return response; // This returns the data directly
                } catch (error) {
                    console.error("Failed to get masternode private key:", error);
                    throw error; // Rethrow error to be caught by the caller
                }
            }

            // Async function to submit masternode vote
            async function submitMasternodeVote(voteDataArray) {
                try {
                    let response = await $.post('@Url.Action("SubmitMasternodeVote", "Masternode", new { Area = "Masternode" })', {
                        voteData: JSON.stringify(voteDataArray)
                    });
                    return response;
                } catch (error) {
                    console.error("Failed to submit masternode vote:", error);
                    throw error;
                }
            }

           evt.stopPropagation();

            var form = $('#frmSubmitVote');
            if (form[0].checkValidity() === false) {
                form.addClass('was-validated');

                return false;
            }
            else
                form.removeClass('was-validated');

            $('#tbProposalId').val(votingProposalId);
            try {
                let dataset = await getMasternodePrivKey();

                for (let data of dataset) {
                    var signature = "";
                    var decrypted = data.privateKey;

                    var voteOutcome = 3;
                    var voteSanitized = 'abstain';

                    if (vote == 'yes') {
                        voteOutcome = 1;
                        voteSanitized = 'yes';
                    } else if (vote == 'no') {
                        voteOutcome = 2;
                        voteSanitized = 'no';
                    }

                    var d = new Date();
                    var seconds = Math.round(d.getTime() / 1000);
                    var vinMasternode = data.collateralHash + '-' + data.collateralIndex;
                    var voteSignal = 1; //funding (should always be 1)

                    var message = vinMasternode + '|' + votingParentHash + '|' + voteSignal + '|' + voteOutcome + '|' + seconds;

                    let signData = await $.ajax({
                        url: '@Url.Action("SignMessage", "Masternode", new { area = "Masternode" })',
                        type: 'POST',
                        dataType: 'json',
                        contentType: 'application/json; charset=utf-8',
                        data: JSON.stringify({ message: message, privateKey: decrypted }),
                    });

                    signature = signData.result;
                    var voteData = {
                        "vinMasternode": data.collateralHash,
                        "collateralIndex": data.collateralIndex,
                        "parentHash": votingParentHash,
                        "voteSignal": voteSignal,
                        "voteOutcome": voteOutcome,
                        "time": seconds,
                        "signature": signature
                    };

                    voteDataArray.push(voteData);

                    if (typeof signature === 'undefined') {
                        Swal.fire({
                            title: 'Failure!',
                            text: 'Something went wrong. Probably incorrect passphrase!',
                            type: 'error',
                            confirmButtonColor: "#48B5C4",
                            confirmButtonText: 'Ok'
                        });
                        return;
                    }
                }

                if (voteDataArray.length > 0) {
                    let submitResponse = await submitMasternodeVote(voteDataArray);
                    if (submitResponse.success) {
                        Swal.fire({
                            title: 'Success!',
                            text: 'Your vote has been submitted to the network!',
                            type: 'success',
                            confirmButtonColor: "#48B5C4",
                            confirmButtonText: 'Ok'
                        });
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: submitResponse.message,
                            type: 'error',
                            confirmButtonColor: "#48B5C4",
                            confirmButtonText: 'Ok'
                        });
                    }
                } else {
                }
            } catch {
                Swal.fire({
                    title: 'Error!',
                    text: 'An error occurred while processing your vote.',
                    type: 'error',
                    confirmButtonColor: "#48B5C4",
                    confirmButtonText: 'Ok'
                });
            }

        });

    </script>

}





